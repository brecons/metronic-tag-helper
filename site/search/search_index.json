{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mecons Tag Helper The Mecons Tag Helper Library comes with 30+ components, controls and UI widgets. Mecons provides a full Keenthemes Metronic Admin Theme integration. Mecons is distributed as an enterprise library which can easily installed via NuGet. Supported Platforms The Mecons Tag Helper Library is only available for ASP.NET Core Web Applications. The following target frameworks are supported: Target Framework Version Target Framework Moniker (TFM) .NET Standard 1.6 netstandard1.6 .NET Standard 2.0 netstandard2.0 Requirements In order to use Mecons Tag Helper Library properly, you must meet certain requirements: Visual Studio 2017 with the installed workloads ASP.NET and web development and .NET Core cross-platform development . A licence and the source files of the Metronic Admin Theme A license and the NuGet package of the Mecons Tag Helper Library Quickstart For those in a hurry, here's a quickstart guide that allows you, as an advanced developer, to get started quickly with Mecons. (1) Download the latest version of Mecons Tag Helper Library from CodeCanyon . (2) Download the latest version of Metronic Admin Theme from ThemeForest . (3) Open Visual Studio 2017 and create a new ASP.NET Core Web Application . (4) Add the following service registrations to the ConfigureServices method in Startup.cs : using Microsoft.AspNetCore.Mvc.Infrastructure ... public void ConfigureServices ( IServiceCollection services ) { services . AddMvc (); services . AddSingleton < IHttpContextAccessor , HttpContextAccessor >(); services . AddSingleton < IActionContextAccessor , ActionContextAccessor >(); } (5) Copy the assets folder of your choosen Metronic Theme into wwwroot of the project. (6) Copy the whole Metronic Theme markup of index.html into your layout page /Views/Shared/_Layout.cshtml and correct all css, image and javascript paths (e.g. into ~/assets/ ). (7) Place @RenderBody() method into layout page. (8) Move all javascripts into the <head> of the layout page. (9) Install Mecons NuGet Package with Package Manager Console: PM> Install-Package BSolutions.Mecons -Source C:\\Downloads\\<UNZIPPED MECONS FOLDER>\\ (10) Add the following lines to /Views/_ViewImports.cshtml : @using MyCompany . MyApplication @using MyCompany . MyApplication . Models @using BSolutions . Mecons . Enumerations @using BSolutions . Brecons . Core . Enumerations @addTagHelper *, Microsoft . AspNetCore . Mvc . TagHelpers @addTagHelper *, BSolutions . Mecons","title":"Overview"},{"location":"#mecons-tag-helper","text":"The Mecons Tag Helper Library comes with 30+ components, controls and UI widgets. Mecons provides a full Keenthemes Metronic Admin Theme integration. Mecons is distributed as an enterprise library which can easily installed via NuGet.","title":"Mecons Tag Helper"},{"location":"#supported-platforms","text":"The Mecons Tag Helper Library is only available for ASP.NET Core Web Applications. The following target frameworks are supported: Target Framework Version Target Framework Moniker (TFM) .NET Standard 1.6 netstandard1.6 .NET Standard 2.0 netstandard2.0","title":"Supported Platforms"},{"location":"#requirements","text":"In order to use Mecons Tag Helper Library properly, you must meet certain requirements: Visual Studio 2017 with the installed workloads ASP.NET and web development and .NET Core cross-platform development . A licence and the source files of the Metronic Admin Theme A license and the NuGet package of the Mecons Tag Helper Library","title":"Requirements"},{"location":"#quickstart","text":"For those in a hurry, here's a quickstart guide that allows you, as an advanced developer, to get started quickly with Mecons. (1) Download the latest version of Mecons Tag Helper Library from CodeCanyon . (2) Download the latest version of Metronic Admin Theme from ThemeForest . (3) Open Visual Studio 2017 and create a new ASP.NET Core Web Application . (4) Add the following service registrations to the ConfigureServices method in Startup.cs : using Microsoft.AspNetCore.Mvc.Infrastructure ... public void ConfigureServices ( IServiceCollection services ) { services . AddMvc (); services . AddSingleton < IHttpContextAccessor , HttpContextAccessor >(); services . AddSingleton < IActionContextAccessor , ActionContextAccessor >(); } (5) Copy the assets folder of your choosen Metronic Theme into wwwroot of the project. (6) Copy the whole Metronic Theme markup of index.html into your layout page /Views/Shared/_Layout.cshtml and correct all css, image and javascript paths (e.g. into ~/assets/ ). (7) Place @RenderBody() method into layout page. (8) Move all javascripts into the <head> of the layout page. (9) Install Mecons NuGet Package with Package Manager Console: PM> Install-Package BSolutions.Mecons -Source C:\\Downloads\\<UNZIPPED MECONS FOLDER>\\ (10) Add the following lines to /Views/_ViewImports.cshtml : @using MyCompany . MyApplication @using MyCompany . MyApplication . Models @using BSolutions . Mecons . Enumerations @using BSolutions . Brecons . Core . Enumerations @addTagHelper *, Microsoft . AspNetCore . Mvc . TagHelpers @addTagHelper *, BSolutions . Mecons","title":"Quickstart"},{"location":"change-log/","text":"Change Logs and Releases In this page, you can find a record of all the changes made to Mecons such as bug fixes, new features, etc. Version 2.2.1 Release Date: Jan. 25, 2019 This version supports Metronic v5.5.5 and contains new tag helpers and some bugfixes. Add a French language file and full support of culture code fr . Add an Italian language file and full support of culture code it . Fixed wrong for attribute generation in label tags of Form Controls. Change the bc-toggle-text attribute of Modal to no longer mandatory. This makes it possible to render a modal dialog without a button. Datatable Tag Helper now provides a JavaScript instance that allows client-side customization of the datatable. Fixed an error while licensing Mecons when hosting the application in local IIS. Fixed that the Datatable don't parse the form data during ajax calls correctly. Version 2.2.0 Release Date: Dec. 06, 2018 This version supports Metronic v5.5.5 and contains new tag helpers and some bugfixes. Also the version of Mecons is compatible with netcoreapp2.2 . Add new Tag Helper for Touchspin . Add new Tag Helper for Switch . Add new Tag Helper for Timepicker . Add new Tag Helper for Daterangepicker . Add support for button rendering with <input type=\"button\" /> in Input Tag Helper . Add data binding support for noUiSlider Tag Helper . The dictionary attribute asp-for-* is available. Add support for pips / scales in noUiSlider Tag Helper . Add a new page for Tag Helper Localization in the documentation. The [Datepicker Tag Helper] is now fully localized. New licensing procedure without separate config file. Change the bc-title attribute of Datatable Tag Helper columns to not longer mandatory. The Dropzone Tag Helper now provides a public instance to which it's easy to bind events. The bc-sliders attribute no longer exists for the noUiSlider Tag Helper . Instead, the sliders are now defined using the bc-slider-* attribute. Switch from bower package manager to Yarn . Solved exception when bc-color is not set in Progress Widget . Solved exception when bc-color is not set in Stats Widget . Version 2.1.0 Release Date: Sep. 15, 2018 This version supports Metronic v5.5.4 and contains new tag helpers and some bugfixes. Tag Helper for Stats Widget Tag Helper for Progress Widget Tag Helper for noUiSlider Tag Helper for Dropzone Table: The attribute bc-bordered has been replaced by the bc-border attribute. Datatable: Add new attribute bc-ajax-timeout to define the ajax timeout. Support for Fontawesome 5 Icons Mandatory attributes are now checked before rendering. If a mandatory attribute is not set then an MandatoryAttributeException will be thrown. Forms: Static Tag Helper crashes when no property is binded. Version 2.0.1 Release Date: Feb. 27, 2018 This version supports Metronic v5.1 and contains some breaking changes and major bugfixes. Forms: Checkbox List support binding of a model member via asp-for attribute. Forms: Radio List support binding of a model member via asp-for attribute. Forms: Radio List support binding of Enumeration values via bc-items attribute. Forms: Validation is now enabled by default (not longer necessary to set bc-validation to true ). Forms: The Static Tag Helper now supports asp-for attribute. Datatable: The datatable has been completely redesigned and the handling improved significantly. Support for Metronic v5.1 Forms: The Static Tag Helper not longer have a css margin-bottom . Forms: The Summernote Tag Helper has a problem with ' (inverted comma) character. Version 2.0.0 Release Date: Dec. 06, 2017 This version supports Metronic v5.0.7.1 and is the initial release of the Mecons Tag Helper Library. Tag Helper for Alert Tag Helper for Anchor Tag Helper for Badge Tag Helper for Button Tag Helper for Button Group Tag Helper for Datatable Tag Helper for Datepicker Tag Helper for Dropdown Button Tag Helper for Form Input Controls Tag Helper for Form Layout Tag Helper for Form Data Binding and Validation Tag Helper for Grid System Tag Helper for Icon Tag Helper for Markdown Tag Helper for Modal Tag Helper for Popover Tag Helper for Portlet Tag Helper for Progress Tag Helper for Stack Tag Helper for Summernote Tag Helper for Table Tag Helper for Tabs Tag Helper for Timeline Tag Helper for Tooltip","title":"Change Log"},{"location":"change-log/#change-logs-and-releases","text":"In this page, you can find a record of all the changes made to Mecons such as bug fixes, new features, etc.","title":"Change Logs and Releases"},{"location":"change-log/#version-221","text":"Release Date: Jan. 25, 2019 This version supports Metronic v5.5.5 and contains new tag helpers and some bugfixes. Add a French language file and full support of culture code fr . Add an Italian language file and full support of culture code it . Fixed wrong for attribute generation in label tags of Form Controls. Change the bc-toggle-text attribute of Modal to no longer mandatory. This makes it possible to render a modal dialog without a button. Datatable Tag Helper now provides a JavaScript instance that allows client-side customization of the datatable. Fixed an error while licensing Mecons when hosting the application in local IIS. Fixed that the Datatable don't parse the form data during ajax calls correctly.","title":"Version 2.2.1"},{"location":"change-log/#version-220","text":"Release Date: Dec. 06, 2018 This version supports Metronic v5.5.5 and contains new tag helpers and some bugfixes. Also the version of Mecons is compatible with netcoreapp2.2 . Add new Tag Helper for Touchspin . Add new Tag Helper for Switch . Add new Tag Helper for Timepicker . Add new Tag Helper for Daterangepicker . Add support for button rendering with <input type=\"button\" /> in Input Tag Helper . Add data binding support for noUiSlider Tag Helper . The dictionary attribute asp-for-* is available. Add support for pips / scales in noUiSlider Tag Helper . Add a new page for Tag Helper Localization in the documentation. The [Datepicker Tag Helper] is now fully localized. New licensing procedure without separate config file. Change the bc-title attribute of Datatable Tag Helper columns to not longer mandatory. The Dropzone Tag Helper now provides a public instance to which it's easy to bind events. The bc-sliders attribute no longer exists for the noUiSlider Tag Helper . Instead, the sliders are now defined using the bc-slider-* attribute. Switch from bower package manager to Yarn . Solved exception when bc-color is not set in Progress Widget . Solved exception when bc-color is not set in Stats Widget .","title":"Version 2.2.0"},{"location":"change-log/#version-210","text":"Release Date: Sep. 15, 2018 This version supports Metronic v5.5.4 and contains new tag helpers and some bugfixes. Tag Helper for Stats Widget Tag Helper for Progress Widget Tag Helper for noUiSlider Tag Helper for Dropzone Table: The attribute bc-bordered has been replaced by the bc-border attribute. Datatable: Add new attribute bc-ajax-timeout to define the ajax timeout. Support for Fontawesome 5 Icons Mandatory attributes are now checked before rendering. If a mandatory attribute is not set then an MandatoryAttributeException will be thrown. Forms: Static Tag Helper crashes when no property is binded.","title":"Version 2.1.0"},{"location":"change-log/#version-201","text":"Release Date: Feb. 27, 2018 This version supports Metronic v5.1 and contains some breaking changes and major bugfixes. Forms: Checkbox List support binding of a model member via asp-for attribute. Forms: Radio List support binding of a model member via asp-for attribute. Forms: Radio List support binding of Enumeration values via bc-items attribute. Forms: Validation is now enabled by default (not longer necessary to set bc-validation to true ). Forms: The Static Tag Helper now supports asp-for attribute. Datatable: The datatable has been completely redesigned and the handling improved significantly. Support for Metronic v5.1 Forms: The Static Tag Helper not longer have a css margin-bottom . Forms: The Summernote Tag Helper has a problem with ' (inverted comma) character.","title":"Version 2.0.1"},{"location":"change-log/#version-200","text":"Release Date: Dec. 06, 2017 This version supports Metronic v5.0.7.1 and is the initial release of the Mecons Tag Helper Library. Tag Helper for Alert Tag Helper for Anchor Tag Helper for Badge Tag Helper for Button Tag Helper for Button Group Tag Helper for Datatable Tag Helper for Datepicker Tag Helper for Dropdown Button Tag Helper for Form Input Controls Tag Helper for Form Layout Tag Helper for Form Data Binding and Validation Tag Helper for Grid System Tag Helper for Icon Tag Helper for Markdown Tag Helper for Modal Tag Helper for Popover Tag Helper for Portlet Tag Helper for Progress Tag Helper for Stack Tag Helper for Summernote Tag Helper for Table Tag Helper for Tabs Tag Helper for Timeline Tag Helper for Tooltip","title":"Version 2.0.0"},{"location":"installation/","text":"Installation On this page you will learn how to install Mecons Tag Helper Library into an ASP.NET Core Web Application together with the Metronic Admin Theme. Create new Web Application The first step is to create a new project in Visual Studio. Choose the Web rubric and subsequent the ASP.NET Core Web Application template. Adapt the project parameters like Name , Location and Solution name and click OK . In the following dialog choose the .NET Core Framework and the ASP.NET Core 2.x version as well as a project template. Optionally change the authentication and click OK . Add Service Configuration To ensure that Mecons runs correctly it is necessary to adapt the Startup.cs . Register inside the ConfigureServices method a singleton for the IActionContextAccessor and IHttpContextAccessor . Finally import the namespace Microsoft.AspNetCore.Mvc.Infrastructure . using Microsoft.AspNetCore.Mvc.Infrastructure ... public void ConfigureServices ( IServiceCollection services ) { services . AddMvc (); services . AddSingleton < IHttpContextAccessor , HttpContextAccessor >(); services . AddSingleton < IActionContextAccessor , ActionContextAccessor >(); } Warning If the services are not registered, an InvalidOperationException may occur on application runtime. Metronic Integration In this section the Metronic Admin Theme will be integrated into an ASP.NET Core Web Application. Include Metronic Files Copy the assets folder of your choosen Metronic Admin Theme (e.g. /metronic_v5.x/dist/<YOUR FAVORITE THEME>/assets ) into the wwwroot folder of your project and rename it to metronic : MyCompany.MyApplication \u251c\u2500\u2500 wwwroot/ \u251c\u2500\u2500 css/ \u251c\u2500\u2500 js/ \u251c\u2500\u2500 lib/ \u251c\u2500\u2500 metronic/ \u251c\u2500\u2500 app/ \u251c\u2500\u2500 demo/ \u251c\u2500\u2500 snippets/ \u251c\u2500\u2500 vendors/ \u251c\u2500\u2500 Controllers/ \u251c\u2500\u2500 Models/ \u2514\u2500\u2500 Views/ Copy the content of your choosen Metronic Admin Theme (e.g. /metronic_v5.x/dist//index.html ) into the Views/Shared/_Layout.cshtml . Afterwards press CTRL + H to open the Quick Replace Tool and replace assets/ with ~/metronic/ . Include the @RenderBody() method at the position where the individual page content will be rendered. To ensure that all Mecons Tag Helpers work as expected, it is necessary to move all JavaScript includes from the page bottom into the <head> . Mecons Installation Open the Package Manager Console in Visual Studio and install the Mecons package: PM> Install-Package BSolutions.Mecons -Source C:\\Downloads\\<UNZIPPED MECONS FOLDER>\\ Warning Not every Mecons package is compatible with every Metronic version. For further information check the description of the selected package or the change log. After the package installation open /Views/_ViewImports.cshtml and insert the marked lines: @using MyCompany . MyApplication @using MyCompany . MyApplication . Models @using BSolutions . Mecons . Enumerations @using BSolutions . Brecons . Core . Enumerations @addTagHelper *, Microsoft . AspNetCore . Mvc . TagHelpers @addTagHelper *, BSolutions . Mecons Mecons Rendering By default, the Mecons Tag Helper Rendering is enabled for each HTML element. To disable the Brecons Tag Helper Rendering for a specific HTML element, set the disable-brecons attribute. The disable-brecons attribute is minimizable and needs no value. <!-- Brecons Rendering --> <button type= \"button\" > Brecons Button </button> <!-- Default HTML Rendering --> <button type= \"button\" disable-brecons > HTML Button </button>","title":"Installation"},{"location":"installation/#installation","text":"On this page you will learn how to install Mecons Tag Helper Library into an ASP.NET Core Web Application together with the Metronic Admin Theme.","title":"Installation"},{"location":"installation/#create-new-web-application","text":"The first step is to create a new project in Visual Studio. Choose the Web rubric and subsequent the ASP.NET Core Web Application template. Adapt the project parameters like Name , Location and Solution name and click OK . In the following dialog choose the .NET Core Framework and the ASP.NET Core 2.x version as well as a project template. Optionally change the authentication and click OK .","title":"Create new Web Application"},{"location":"installation/#add-service-configuration","text":"To ensure that Mecons runs correctly it is necessary to adapt the Startup.cs . Register inside the ConfigureServices method a singleton for the IActionContextAccessor and IHttpContextAccessor . Finally import the namespace Microsoft.AspNetCore.Mvc.Infrastructure . using Microsoft.AspNetCore.Mvc.Infrastructure ... public void ConfigureServices ( IServiceCollection services ) { services . AddMvc (); services . AddSingleton < IHttpContextAccessor , HttpContextAccessor >(); services . AddSingleton < IActionContextAccessor , ActionContextAccessor >(); } Warning If the services are not registered, an InvalidOperationException may occur on application runtime.","title":"Add Service Configuration"},{"location":"installation/#metronic-integration","text":"In this section the Metronic Admin Theme will be integrated into an ASP.NET Core Web Application.","title":"Metronic Integration"},{"location":"installation/#include-metronic-files","text":"Copy the assets folder of your choosen Metronic Admin Theme (e.g. /metronic_v5.x/dist/<YOUR FAVORITE THEME>/assets ) into the wwwroot folder of your project and rename it to metronic : MyCompany.MyApplication \u251c\u2500\u2500 wwwroot/ \u251c\u2500\u2500 css/ \u251c\u2500\u2500 js/ \u251c\u2500\u2500 lib/ \u251c\u2500\u2500 metronic/ \u251c\u2500\u2500 app/ \u251c\u2500\u2500 demo/ \u251c\u2500\u2500 snippets/ \u251c\u2500\u2500 vendors/ \u251c\u2500\u2500 Controllers/ \u251c\u2500\u2500 Models/ \u2514\u2500\u2500 Views/ Copy the content of your choosen Metronic Admin Theme (e.g. /metronic_v5.x/dist//index.html ) into the Views/Shared/_Layout.cshtml . Afterwards press CTRL + H to open the Quick Replace Tool and replace assets/ with ~/metronic/ . Include the @RenderBody() method at the position where the individual page content will be rendered. To ensure that all Mecons Tag Helpers work as expected, it is necessary to move all JavaScript includes from the page bottom into the <head> .","title":"Include Metronic Files"},{"location":"installation/#mecons-installation","text":"Open the Package Manager Console in Visual Studio and install the Mecons package: PM> Install-Package BSolutions.Mecons -Source C:\\Downloads\\<UNZIPPED MECONS FOLDER>\\ Warning Not every Mecons package is compatible with every Metronic version. For further information check the description of the selected package or the change log. After the package installation open /Views/_ViewImports.cshtml and insert the marked lines: @using MyCompany . MyApplication @using MyCompany . MyApplication . Models @using BSolutions . Mecons . Enumerations @using BSolutions . Brecons . Core . Enumerations @addTagHelper *, Microsoft . AspNetCore . Mvc . TagHelpers @addTagHelper *, BSolutions . Mecons","title":"Mecons Installation"},{"location":"installation/#mecons-rendering","text":"By default, the Mecons Tag Helper Rendering is enabled for each HTML element. To disable the Brecons Tag Helper Rendering for a specific HTML element, set the disable-brecons attribute. The disable-brecons attribute is minimizable and needs no value. <!-- Brecons Rendering --> <button type= \"button\" > Brecons Button </button> <!-- Default HTML Rendering --> <button type= \"button\" disable-brecons > HTML Button </button>","title":"Mecons Rendering"},{"location":"localization/","text":"Localization The Mecons Tag Helper supports multiple languages and are localized. This applies on the one hand to all texts and labels generated within a Tag Helper, but also to date and time outputs. Supported Languages Currently the following languages are supported: Language State Available since English Supported Version 2.0.0 German Supported Version 2.0.0 French Supported Version 2.2.1 Italian Supported Version 2.2.1 Usage of Localization To localize the Tag Helpers, Mecons uses the CultureInfo set in the current thread . Use the following code snippet to modify the CultureInfo for the current thread: // Set current thread language to German Thread . CurrentThread . CurrentCulture = new CultureInfo ( \"de-DE\" ); Note For a complete list of all CultureInfo names, visit https://msdn.microsoft.com/en-us/library/hh441729.aspx . The CultureInfo for your ASP.NET Core web application is best set in the Startup.cs within the Configure method: public void Configure ( IApplicationBuilder app , IHostingEnvironment env ) { ... // Language var cultureInfo = new CultureInfo ( \"de-DE\" ); CultureInfo . DefaultThreadCurrentCulture = cultureInfo ; CultureInfo . DefaultThreadCurrentUICulture = cultureInfo ; } Note If Mecons can not find a suitable language file for the thread culture, the English language file will be used.","title":"Localization"},{"location":"localization/#localization","text":"The Mecons Tag Helper supports multiple languages and are localized. This applies on the one hand to all texts and labels generated within a Tag Helper, but also to date and time outputs.","title":"Localization"},{"location":"localization/#supported-languages","text":"Currently the following languages are supported: Language State Available since English Supported Version 2.0.0 German Supported Version 2.0.0 French Supported Version 2.2.1 Italian Supported Version 2.2.1","title":"Supported Languages"},{"location":"localization/#usage-of-localization","text":"To localize the Tag Helpers, Mecons uses the CultureInfo set in the current thread . Use the following code snippet to modify the CultureInfo for the current thread: // Set current thread language to German Thread . CurrentThread . CurrentCulture = new CultureInfo ( \"de-DE\" ); Note For a complete list of all CultureInfo names, visit https://msdn.microsoft.com/en-us/library/hh441729.aspx . The CultureInfo for your ASP.NET Core web application is best set in the Startup.cs within the Configure method: public void Configure ( IApplicationBuilder app , IHostingEnvironment env ) { ... // Language var cultureInfo = new CultureInfo ( \"de-DE\" ); CultureInfo . DefaultThreadCurrentCulture = cultureInfo ; CultureInfo . DefaultThreadCurrentUICulture = cultureInfo ; } Note If Mecons can not find a suitable language file for the thread culture, the English language file will be used.","title":"Usage of Localization"},{"location":"components/alert/","text":"Alert Provide contextual feedback messages for typical user actions with a handful of available and flexible Alert messages. <alert bc-title= \"Primary!\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr </alert> Configuration Color For proper styling of an alert use the bc-color attribute. <alert bc-title= \"Success!\" bc-color= \"Success\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr </alert> <alert bc-title= \"Info!\" bc-color= \"Info\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr </alert> <alert bc-title= \"Warning!\" bc-color= \"Warning\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr </alert> <alert bc-title= \"Danger!\" bc-color= \"Danger\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr </alert> Dismissible Use the bc-dismissible attribute to dismiss any alert inline. <alert bc-title= \"Info!\" bc-color= \"Info\" bc-dismissible= \"true\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr </alert> Link Styling Links in any alert gets automatically a matching font color for a ideal illustration. To deactivate the automatical styling use the bc-disable-link-styling attribute and set it to true . <alert bc-title= \"Brand!\" bc-color= \"Brand\" bc-disable-link-styling= \"true\" > Lorem ipsum dolor sit amet, <a href= \"#\" > consetetur </a> sadipscing elitr </alert> Title Use the bc-title attribute to add a title for the alert in addition to the content. <alert bc-title= \"Brand!\" bc-color= \"Brand\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr </alert>","title":"Alert"},{"location":"components/alert/#alert","text":"Provide contextual feedback messages for typical user actions with a handful of available and flexible Alert messages. <alert bc-title= \"Primary!\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr </alert>","title":"Alert"},{"location":"components/alert/#configuration","text":"","title":"Configuration"},{"location":"components/alert/#color","text":"For proper styling of an alert use the bc-color attribute. <alert bc-title= \"Success!\" bc-color= \"Success\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr </alert> <alert bc-title= \"Info!\" bc-color= \"Info\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr </alert> <alert bc-title= \"Warning!\" bc-color= \"Warning\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr </alert> <alert bc-title= \"Danger!\" bc-color= \"Danger\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr </alert>","title":"Color"},{"location":"components/alert/#dismissible","text":"Use the bc-dismissible attribute to dismiss any alert inline. <alert bc-title= \"Info!\" bc-color= \"Info\" bc-dismissible= \"true\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr </alert>","title":"Dismissible"},{"location":"components/alert/#link-styling","text":"Links in any alert gets automatically a matching font color for a ideal illustration. To deactivate the automatical styling use the bc-disable-link-styling attribute and set it to true . <alert bc-title= \"Brand!\" bc-color= \"Brand\" bc-disable-link-styling= \"true\" > Lorem ipsum dolor sit amet, <a href= \"#\" > consetetur </a> sadipscing elitr </alert>","title":"Link Styling"},{"location":"components/alert/#title","text":"Use the bc-title attribute to add a title for the alert in addition to the content. <alert bc-title= \"Brand!\" bc-color= \"Brand\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr </alert>","title":"Title"},{"location":"components/datatable/","text":"Datatable The Datatable is a highly flexible tool which extends the HTML table with advanced interaction controls. Configuration Sorting To enable column sorting for the Datatable, set the bc-sorting attribute to true . By default, all columns of the Datatable are sortable if this attribute is set. To disable sorting for specific columns check Sorting in the Column Configuration. <datatable bc-sorting= \"true\" > ... </datatable> Paging Datatables can split the rows into individual pages, which is an efficient method of showing a large number of records in a small space. To enable paging set the bc-paging attribute to true . <datatable bc-paging= \"true\" > ... </datatable> Page Size Define a number of rows to display on a single page with bc-page-size attribute when using pagination. This attribute only has an effect if the bc-paging attribute is set to true . By default, the page size is set to 10 . Height By default, the height of the table depends on its content. A fixed height can be set with the bc-height attribute. If the content is now higher than the defined height, a scroll bar is displayed. The height is expressed as an integer and in pixels (px). <datatable bc-height= \"200\" > ... </datatable> Header Set the bc-header attribute to false to hide the table header for the Datatable. By default, the table header is shown and the attribute is true . Footer Set the bc-footer attribute to true to show a table footer at the bottom of the Datatable. Searching This option allows the search abilities of Datatables to be enabled or disabled. To enable searching it is necessary to specify a search input field with the bc-search-input attribute. The value specified here is the id of the input field. <row> <column xs-size= \"4\" > <input id= \"generalSearch\" type= \"text\" class= \"form-control m-input m-input--solid\" placeholder= \"Search...\" > </column> </row> <row> <column> <datatable bc-search-input= \"generalSearch\" > </column> </row> Control the speed of search and data load request to reduce the search call frequency automatically. Use the bc-search-delay attribute to set the number of milliseconds. By default, the search delay is 400 milliseconds. Column Configuration Field (Mandatory) The data field name of the column will be set with the bc-field attribute. This attribute maps a field of the data source to the defined column. Title The title name will be displayed as header or footer and can set with bc-title attribute. This is the displayed title of the column. Sorting When the sorting is enabled on <datatable> level, by default all columns can be sorted. If you want to disable sorting for a column, set the bc-sorting attribute to false . Searching When a search input field is specified on <datatable> level, by default all columns are searchable. If you want to disable searching for a column, set the bc-searching attribute to false . Width By default, all columns have the same width. Define a custom column width with the bc-width attribute. The width is expressed as an integer and in pixels (px). Alignment The horizontal alignment of cells text for a specific column can set with bc-alignment attribute. Possible alignments are Left (default), Center or Right . Overflow The bc-overflow attribute specifies what should happen if content overflows a cell in within a column. The possible values of this attribute equals the CSS Overflow Property . By default, the overflow is set to Initial . Template There are two ways to influence the appearance of a column. The placeholder provides an easy way to enrich or modify the content of a cell. An own template script offers the full flexibility for the free design of the column content. Placeholder Customize the cell content rendering with the bc-template attribute. Use placeholders (e.g. {{FieldName}} ) to access the content of column fields and define a custom template. This mechanism is well known from the C# String Interpolation. <datatable bc-ajax-url= \"/api/Demo/\" bc-paging= \"true\" > <datatable-column bc-field= \"recordID\" bc-title= \"#\" bc-width= \"50\" /> <datatable-column bc-field= \"shipCountry\" bc-title= \"Ship Country\" bc-template= \" {{ shipCountry }} - {{ shipCity }} \" /> <datatable-column bc-field= \"shipCity\" bc-title= \"Ship City\" bc-width= \"110\" /> </datatable> Script It is also possible to modify the content of a column using its own JavaScript. This provides more flexibility than a placeholder. The script is defined within the <datatable-column> tag helper and must be placed in HTML comments ( <!-- and --> ). <datatable bc-ajax-url= \"/api/Demo/\" bc-paging= \"true\" > <datatable-column bc-field= \"recordID\" bc-title= \"#\" bc-width= \"50\" /> <datatable-column bc-field= \"shipCountry\" bc-title= \"Ship Country\" bc-template= \" {{ shipCountry }} - {{ shipCity }} \" /> <datatable-column bc-field= \"shipCity\" bc-title= \"Ship City\" bc-width= \"110\" /> <datatable-column bc-alignment= \"Right\" > <!-- function (row) { return \"<a class='btn btn-info' href='/Product/\" + row.recordID + \"'>Edit</a>\"; } --> </datatable-column> </datatable> HTML Data Source The Mecons Datatable component supports initialization from HTML table. It also defines the schema model of the data source. In addition to the visualization, the Datatable provides built-in support for operations over data such as sorting, filtering and paging performed in user browser (frontend). To provide a traditional HTML table as Datatable, place your HTML table markup in your view and set your favorite Datatable attributes. No serverside code or processing is needed. <datatable bc-paging= \"true\" bc-sorting= \"true\" > <thead> <tr> <th> Order ID </th> <th> Owner </th> <th> Contact </th> <th> Car Make </th> <th> Car Model </th> <th> Color </th> <th> Deposit Paid </th> <th> Order Date </th> </tr> </thead> <tbody> <tr> <td> 16590-107 </td> <td> Zandra Fisbburne </td> <td> (916) 6137523 </td> <td> Pontiac </td> <td> Grand Am </td> <td> Puce </td> <td> $75343.80 </td> <td> 2016-09-08 </td> </tr> <tr> ... </tr> <tr> ... </tr> ... </tbody> </datatable> AJAX Data Source The Mecons Datatable component supports remote data binding. For remote data binding you can specify a remote data source that returns data in JSON/JSONP format. It also defines the schema model of the data source received from the remote data source. In addition to the visualization, the Datatable provides built-in support for operations over data such as sorting, filtering and paging performed in user browser (frontend). Url (Mandatory) Use the bc-ajax-url attribute to specify the url to the web service which provides the data for the Datatable. This property is mandatory for remote data binding. Method Choose a HTTP method for requesting the web service by setting the bc-ajax-method attribute. Possible methods are Post (default), Get , Put and Delete . Timeout Set a number of milliseconds before the request ended. Default is 30000 , equal to 30 seconds. Params Your own API may requires some parameter to call for getting the data. E.g. token, search keywords, IDs, etc. Specify query parameters with the bc-ajax-param-* attribute. This query parameters will be sent along in the Datatable API request. Headers Set custom HTTP headers with the bc-ajax-header-* attribute for the API call. Serverside Processing With the Mecons Datatable it is possible to process the paging, filtering and sorting logic on serverside within your API method. It is possible to enable the serverside processing individually for this functionalities. Set the bc-ajax-paging to true to process the paging logic on serverside. Set the bc-ajax-filtering to true and handle the data filtering in the API method. Set the bc-ajax-sorting to true and sort your data by the specified column on serverside. Usage In order to connect a remote data source (like a REST API) to a Datatable, it is necessary to provide a web service. Also, the necessary Tag Helper Markup must be accommodated on the corresponding view. Within the API controller it is very easy to receive all transmitted form data from the Datatable request. Use our Mecons DatatableAjaxRequest model class to parse the form data of the API action into a simple type-safe object. We also assist you in sorting, searching and selecting records. Import the BSolutions.Mecons.Controls.Datatable.Extensions namespace into your controller and use the FilterExtensions to proceed your data. The last challenge is to send the data back to the Datatable. Use the DatatableAjaxResponse<T> class, which transmits the data correctly in the right structure to the Datatable. [HttpPost] public DatatableAjaxResponse < ShipViewModel > Post ( IFormCollection data ) { // Get all ships from database IQueryable < ShipViewModel > items = this . GetAll (); // Get all form data from Datatable request var request = new DatatableAjaxRequest ( data ); // Initialize a new Datatable response object var response = new DatatableAjaxResponse < ShipViewModel > ( items . Count (), request ); // Ordering IQueryable < ShipViewModel > query = items . Sort < ShipViewModel >( response ); // Searching query = query . Search ( request , response ); // Paging query = query . Select ( response ); response . Data = query . ToList (); return response ; } Within the view place the <datatable> tag helper and define your columns with the <datatable-column> Tag Helper. Important is, that you set the bc-field attribute on each column with the name of the associated data field. <row> <column xs-size= \"4\" > <input type= \"text\" class= \"form-control m-input m-input--solid\" placeholder= \"Search...\" id= \"generalSearch\" > </column> </row> <row> <column> <datatable bc-ajax-url= \"/api/Demo/\" bc-ajax-sorting= \"true\" bc-ajax-filtering= \"true\" bc-ajax-paging= \"true\" bc-search-input= \"generalSearch\" > <datatable-column bc-field= \"recordID\" bc-title= \"#\" bc-width= \"50\" /> <datatable-column bc-field= \"shipCountry\" bc-title= \"Ship Country\" bc-template= \" {{ shipCountry }} - {{ shipCity }} \" /> <datatable-column bc-field= \"shipCity\" bc-title= \"Ship City\" bc-width= \"110\" /> <datatable-column class= \"actions\" > <!-- function (row) { return \"<a class='btn btn-info' href='/Product/\" + row.recordID + \"'>Edit</a>\"; } --> </datatable-column> </datatable> </column> </row>","title":"Datatable"},{"location":"components/datatable/#datatable","text":"The Datatable is a highly flexible tool which extends the HTML table with advanced interaction controls.","title":"Datatable"},{"location":"components/datatable/#configuration","text":"","title":"Configuration"},{"location":"components/datatable/#sorting","text":"To enable column sorting for the Datatable, set the bc-sorting attribute to true . By default, all columns of the Datatable are sortable if this attribute is set. To disable sorting for specific columns check Sorting in the Column Configuration. <datatable bc-sorting= \"true\" > ... </datatable>","title":"Sorting"},{"location":"components/datatable/#paging","text":"Datatables can split the rows into individual pages, which is an efficient method of showing a large number of records in a small space. To enable paging set the bc-paging attribute to true . <datatable bc-paging= \"true\" > ... </datatable>","title":"Paging"},{"location":"components/datatable/#page-size","text":"Define a number of rows to display on a single page with bc-page-size attribute when using pagination. This attribute only has an effect if the bc-paging attribute is set to true . By default, the page size is set to 10 .","title":"Page Size"},{"location":"components/datatable/#height","text":"By default, the height of the table depends on its content. A fixed height can be set with the bc-height attribute. If the content is now higher than the defined height, a scroll bar is displayed. The height is expressed as an integer and in pixels (px). <datatable bc-height= \"200\" > ... </datatable>","title":"Height"},{"location":"components/datatable/#header","text":"Set the bc-header attribute to false to hide the table header for the Datatable. By default, the table header is shown and the attribute is true .","title":"Header"},{"location":"components/datatable/#footer","text":"Set the bc-footer attribute to true to show a table footer at the bottom of the Datatable.","title":"Footer"},{"location":"components/datatable/#searching","text":"This option allows the search abilities of Datatables to be enabled or disabled. To enable searching it is necessary to specify a search input field with the bc-search-input attribute. The value specified here is the id of the input field. <row> <column xs-size= \"4\" > <input id= \"generalSearch\" type= \"text\" class= \"form-control m-input m-input--solid\" placeholder= \"Search...\" > </column> </row> <row> <column> <datatable bc-search-input= \"generalSearch\" > </column> </row> Control the speed of search and data load request to reduce the search call frequency automatically. Use the bc-search-delay attribute to set the number of milliseconds. By default, the search delay is 400 milliseconds.","title":"Searching"},{"location":"components/datatable/#column-configuration","text":"","title":"Column Configuration"},{"location":"components/datatable/#field-mandatory","text":"The data field name of the column will be set with the bc-field attribute. This attribute maps a field of the data source to the defined column.","title":"Field (Mandatory)"},{"location":"components/datatable/#title","text":"The title name will be displayed as header or footer and can set with bc-title attribute. This is the displayed title of the column.","title":"Title"},{"location":"components/datatable/#sorting_1","text":"When the sorting is enabled on <datatable> level, by default all columns can be sorted. If you want to disable sorting for a column, set the bc-sorting attribute to false .","title":"Sorting"},{"location":"components/datatable/#searching_1","text":"When a search input field is specified on <datatable> level, by default all columns are searchable. If you want to disable searching for a column, set the bc-searching attribute to false .","title":"Searching"},{"location":"components/datatable/#width","text":"By default, all columns have the same width. Define a custom column width with the bc-width attribute. The width is expressed as an integer and in pixels (px).","title":"Width"},{"location":"components/datatable/#alignment","text":"The horizontal alignment of cells text for a specific column can set with bc-alignment attribute. Possible alignments are Left (default), Center or Right .","title":"Alignment"},{"location":"components/datatable/#overflow","text":"The bc-overflow attribute specifies what should happen if content overflows a cell in within a column. The possible values of this attribute equals the CSS Overflow Property . By default, the overflow is set to Initial .","title":"Overflow"},{"location":"components/datatable/#template","text":"There are two ways to influence the appearance of a column. The placeholder provides an easy way to enrich or modify the content of a cell. An own template script offers the full flexibility for the free design of the column content.","title":"Template"},{"location":"components/datatable/#placeholder","text":"Customize the cell content rendering with the bc-template attribute. Use placeholders (e.g. {{FieldName}} ) to access the content of column fields and define a custom template. This mechanism is well known from the C# String Interpolation. <datatable bc-ajax-url= \"/api/Demo/\" bc-paging= \"true\" > <datatable-column bc-field= \"recordID\" bc-title= \"#\" bc-width= \"50\" /> <datatable-column bc-field= \"shipCountry\" bc-title= \"Ship Country\" bc-template= \" {{ shipCountry }} - {{ shipCity }} \" /> <datatable-column bc-field= \"shipCity\" bc-title= \"Ship City\" bc-width= \"110\" /> </datatable>","title":"Placeholder"},{"location":"components/datatable/#script","text":"It is also possible to modify the content of a column using its own JavaScript. This provides more flexibility than a placeholder. The script is defined within the <datatable-column> tag helper and must be placed in HTML comments ( <!-- and --> ). <datatable bc-ajax-url= \"/api/Demo/\" bc-paging= \"true\" > <datatable-column bc-field= \"recordID\" bc-title= \"#\" bc-width= \"50\" /> <datatable-column bc-field= \"shipCountry\" bc-title= \"Ship Country\" bc-template= \" {{ shipCountry }} - {{ shipCity }} \" /> <datatable-column bc-field= \"shipCity\" bc-title= \"Ship City\" bc-width= \"110\" /> <datatable-column bc-alignment= \"Right\" > <!-- function (row) { return \"<a class='btn btn-info' href='/Product/\" + row.recordID + \"'>Edit</a>\"; } --> </datatable-column> </datatable>","title":"Script"},{"location":"components/datatable/#html-data-source","text":"The Mecons Datatable component supports initialization from HTML table. It also defines the schema model of the data source. In addition to the visualization, the Datatable provides built-in support for operations over data such as sorting, filtering and paging performed in user browser (frontend). To provide a traditional HTML table as Datatable, place your HTML table markup in your view and set your favorite Datatable attributes. No serverside code or processing is needed. <datatable bc-paging= \"true\" bc-sorting= \"true\" > <thead> <tr> <th> Order ID </th> <th> Owner </th> <th> Contact </th> <th> Car Make </th> <th> Car Model </th> <th> Color </th> <th> Deposit Paid </th> <th> Order Date </th> </tr> </thead> <tbody> <tr> <td> 16590-107 </td> <td> Zandra Fisbburne </td> <td> (916) 6137523 </td> <td> Pontiac </td> <td> Grand Am </td> <td> Puce </td> <td> $75343.80 </td> <td> 2016-09-08 </td> </tr> <tr> ... </tr> <tr> ... </tr> ... </tbody> </datatable>","title":"HTML Data Source"},{"location":"components/datatable/#ajax-data-source","text":"The Mecons Datatable component supports remote data binding. For remote data binding you can specify a remote data source that returns data in JSON/JSONP format. It also defines the schema model of the data source received from the remote data source. In addition to the visualization, the Datatable provides built-in support for operations over data such as sorting, filtering and paging performed in user browser (frontend).","title":"AJAX Data Source"},{"location":"components/datatable/#url-mandatory","text":"Use the bc-ajax-url attribute to specify the url to the web service which provides the data for the Datatable. This property is mandatory for remote data binding.","title":"Url (Mandatory)"},{"location":"components/datatable/#method","text":"Choose a HTTP method for requesting the web service by setting the bc-ajax-method attribute. Possible methods are Post (default), Get , Put and Delete .","title":"Method"},{"location":"components/datatable/#timeout","text":"Set a number of milliseconds before the request ended. Default is 30000 , equal to 30 seconds.","title":"Timeout"},{"location":"components/datatable/#params","text":"Your own API may requires some parameter to call for getting the data. E.g. token, search keywords, IDs, etc. Specify query parameters with the bc-ajax-param-* attribute. This query parameters will be sent along in the Datatable API request.","title":"Params"},{"location":"components/datatable/#headers","text":"Set custom HTTP headers with the bc-ajax-header-* attribute for the API call.","title":"Headers"},{"location":"components/datatable/#serverside-processing","text":"With the Mecons Datatable it is possible to process the paging, filtering and sorting logic on serverside within your API method. It is possible to enable the serverside processing individually for this functionalities. Set the bc-ajax-paging to true to process the paging logic on serverside. Set the bc-ajax-filtering to true and handle the data filtering in the API method. Set the bc-ajax-sorting to true and sort your data by the specified column on serverside.","title":"Serverside Processing"},{"location":"components/datatable/#usage","text":"In order to connect a remote data source (like a REST API) to a Datatable, it is necessary to provide a web service. Also, the necessary Tag Helper Markup must be accommodated on the corresponding view. Within the API controller it is very easy to receive all transmitted form data from the Datatable request. Use our Mecons DatatableAjaxRequest model class to parse the form data of the API action into a simple type-safe object. We also assist you in sorting, searching and selecting records. Import the BSolutions.Mecons.Controls.Datatable.Extensions namespace into your controller and use the FilterExtensions to proceed your data. The last challenge is to send the data back to the Datatable. Use the DatatableAjaxResponse<T> class, which transmits the data correctly in the right structure to the Datatable. [HttpPost] public DatatableAjaxResponse < ShipViewModel > Post ( IFormCollection data ) { // Get all ships from database IQueryable < ShipViewModel > items = this . GetAll (); // Get all form data from Datatable request var request = new DatatableAjaxRequest ( data ); // Initialize a new Datatable response object var response = new DatatableAjaxResponse < ShipViewModel > ( items . Count (), request ); // Ordering IQueryable < ShipViewModel > query = items . Sort < ShipViewModel >( response ); // Searching query = query . Search ( request , response ); // Paging query = query . Select ( response ); response . Data = query . ToList (); return response ; } Within the view place the <datatable> tag helper and define your columns with the <datatable-column> Tag Helper. Important is, that you set the bc-field attribute on each column with the name of the associated data field. <row> <column xs-size= \"4\" > <input type= \"text\" class= \"form-control m-input m-input--solid\" placeholder= \"Search...\" id= \"generalSearch\" > </column> </row> <row> <column> <datatable bc-ajax-url= \"/api/Demo/\" bc-ajax-sorting= \"true\" bc-ajax-filtering= \"true\" bc-ajax-paging= \"true\" bc-search-input= \"generalSearch\" > <datatable-column bc-field= \"recordID\" bc-title= \"#\" bc-width= \"50\" /> <datatable-column bc-field= \"shipCountry\" bc-title= \"Ship Country\" bc-template= \" {{ shipCountry }} - {{ shipCity }} \" /> <datatable-column bc-field= \"shipCity\" bc-title= \"Ship City\" bc-width= \"110\" /> <datatable-column class= \"actions\" > <!-- function (row) { return \"<a class='btn btn-info' href='/Product/\" + row.recordID + \"'>Edit</a>\"; } --> </datatable-column> </datatable> </column> </row>","title":"Usage"},{"location":"components/modal/","text":"Modal Use a Modal to add dialogs to your site for lightboxes, user notifications, or completely custom content. These quite complex component is capsuled within a Mecons Tag Helper and is very easy to use! <modal bc-title= \"Modal title\" bc-toggle-text= \"Launch modal\" > <modal-body> Modal body text goes here. </modal-body> <modal-footer> <button type= \"button\" data-dismiss= \"modal\" > Close </button> <button type= \"button\" > Save changes </button> </modal-footer> </modal> Components Components are tag helpers that are available within a <modal> . Header A modal dialog header can optionally added with a <modal-header> tag helper within the <modal> element. Body The <modal-body> tag helper is the core of an <modal> and within you can define the content of the modal dialog. These tag helper is mandatory for a correct modal rendering. Footer A modal dialog footer can optionally added with a <modal-footer> tag helper within the <modal> element. Configuration Toggle Text The <modal> automatically renders a toggle button for the modal dialog. The prerequisite for this is that the bc-toggle-text attribute has been set. This attribute defines the name for the toggle button. Leave the attribute empty or do not set it at all, then only the modal dialog without a button will be rendered. Toggle Color The <modal> automatically renders a toggle button for the modal dialog. With the bc-toggle-color attribute it is possible to define a color for the toggle button. Title There are two ways to define a title for a modal dialog. The easiest way is to set a title with the bc-title attribute. The second way is to specify an header tag (e.g. <h2> ) within the <modal-header> . <modal bc-title= \"Modal title\" bc-toggle-text= \"Launch modal\" > ... </modal> <modal bc-toggle-text= \"Launch modal\" > <modal-header> <h2> Modal title </h2> <modal-header> </modal> Size Modals have two optional sizes, available via bc-size attribute. Allocatable are the sizes Small , Default and Large . Position Modals can be display both at the top of a page and in the middle. Use the bc-position attribute to specify the modal position. Possible positions are Top (default) and Center . Header Configuration Disable Close Button To hide the modal dialog close button set the bc-disable-close-icon attribute. Body Configuration Height Set a maximum height for the <modal-body> with the bc-height attribute. If the content overflows the maximum body height a scrollbar will shown. Allowed values for this attribute are integers. The unit for this value are pixels (px).","title":"Modal"},{"location":"components/modal/#modal","text":"Use a Modal to add dialogs to your site for lightboxes, user notifications, or completely custom content. These quite complex component is capsuled within a Mecons Tag Helper and is very easy to use! <modal bc-title= \"Modal title\" bc-toggle-text= \"Launch modal\" > <modal-body> Modal body text goes here. </modal-body> <modal-footer> <button type= \"button\" data-dismiss= \"modal\" > Close </button> <button type= \"button\" > Save changes </button> </modal-footer> </modal>","title":"Modal"},{"location":"components/modal/#components","text":"Components are tag helpers that are available within a <modal> .","title":"Components"},{"location":"components/modal/#header","text":"A modal dialog header can optionally added with a <modal-header> tag helper within the <modal> element.","title":"Header"},{"location":"components/modal/#body","text":"The <modal-body> tag helper is the core of an <modal> and within you can define the content of the modal dialog. These tag helper is mandatory for a correct modal rendering.","title":"Body"},{"location":"components/modal/#footer","text":"A modal dialog footer can optionally added with a <modal-footer> tag helper within the <modal> element.","title":"Footer"},{"location":"components/modal/#configuration","text":"","title":"Configuration"},{"location":"components/modal/#toggle-text","text":"The <modal> automatically renders a toggle button for the modal dialog. The prerequisite for this is that the bc-toggle-text attribute has been set. This attribute defines the name for the toggle button. Leave the attribute empty or do not set it at all, then only the modal dialog without a button will be rendered.","title":"Toggle Text"},{"location":"components/modal/#toggle-color","text":"The <modal> automatically renders a toggle button for the modal dialog. With the bc-toggle-color attribute it is possible to define a color for the toggle button.","title":"Toggle Color"},{"location":"components/modal/#title","text":"There are two ways to define a title for a modal dialog. The easiest way is to set a title with the bc-title attribute. The second way is to specify an header tag (e.g. <h2> ) within the <modal-header> . <modal bc-title= \"Modal title\" bc-toggle-text= \"Launch modal\" > ... </modal> <modal bc-toggle-text= \"Launch modal\" > <modal-header> <h2> Modal title </h2> <modal-header> </modal>","title":"Title"},{"location":"components/modal/#size","text":"Modals have two optional sizes, available via bc-size attribute. Allocatable are the sizes Small , Default and Large .","title":"Size"},{"location":"components/modal/#position","text":"Modals can be display both at the top of a page and in the middle. Use the bc-position attribute to specify the modal position. Possible positions are Top (default) and Center .","title":"Position"},{"location":"components/modal/#header-configuration","text":"","title":"Header Configuration"},{"location":"components/modal/#disable-close-button","text":"To hide the modal dialog close button set the bc-disable-close-icon attribute.","title":"Disable Close Button"},{"location":"components/modal/#body-configuration","text":"","title":"Body Configuration"},{"location":"components/modal/#height","text":"Set a maximum height for the <modal-body> with the bc-height attribute. If the content overflows the maximum body height a scrollbar will shown. Allowed values for this attribute are integers. The unit for this value are pixels (px).","title":"Height"},{"location":"components/popover/","text":"Popover A Popover is a component to show additional informations for an element like those found in iOS. With the Mecons Tag Helper it is possible to add those informations to any element on your app. <button type= \"button\" bc-popover= \"Vivamus sagittis lacus vel augue laoreet rutrum faucibus.\" > Popover on top </button> Configuration Content (Mandatory) (Trigger Attribute) The bc-popover attribute is available on each HTML element and specifies the popover content. After these attribute is set for an element further attributes are available to concretize the popover definition. <button type= \"button\" bc-popover= \"Text and content\" > Button with Popover </button> Title You can set a title for the popover with the bc-popover-title attribute. <button type= \"button\" bc-popover= \"...\" bc-popover-title= \"Popover title\" > Popover on top </button> Dismissible Use the bc-popover-dismissible attribute and set a focus trigger to dismiss popovers on the next click that user makes. Delay Define a delay for showing and hiding the popover with bc-popover-delay attribute. The value of these attribute are milliseconds. <button type= \"button\" bc-popover= \"Text and content\" bc-popover-delay= \"1000\" > Button with Popover </button> Placement With the bc-popover-placement can specified how to position a popover. Possible values are Top (default), Bottom , Left or Right . HTML Set the bc-popover-html attribute to true to allow HTML tags within the popover content. <button type= \"button\" bc-popover= \"And here's some amazing <b>HTML</b> content. It's very <code>engaging</code>. Right?\" bc-popover-html= \"true\" > Popover with HTML </button>","title":"Popover"},{"location":"components/popover/#popover","text":"A Popover is a component to show additional informations for an element like those found in iOS. With the Mecons Tag Helper it is possible to add those informations to any element on your app. <button type= \"button\" bc-popover= \"Vivamus sagittis lacus vel augue laoreet rutrum faucibus.\" > Popover on top </button>","title":"Popover"},{"location":"components/popover/#configuration","text":"","title":"Configuration"},{"location":"components/popover/#content-mandatory-trigger-attribute","text":"The bc-popover attribute is available on each HTML element and specifies the popover content. After these attribute is set for an element further attributes are available to concretize the popover definition. <button type= \"button\" bc-popover= \"Text and content\" > Button with Popover </button>","title":"Content (Mandatory) (Trigger Attribute)"},{"location":"components/popover/#title","text":"You can set a title for the popover with the bc-popover-title attribute. <button type= \"button\" bc-popover= \"...\" bc-popover-title= \"Popover title\" > Popover on top </button>","title":"Title"},{"location":"components/popover/#dismissible","text":"Use the bc-popover-dismissible attribute and set a focus trigger to dismiss popovers on the next click that user makes.","title":"Dismissible"},{"location":"components/popover/#delay","text":"Define a delay for showing and hiding the popover with bc-popover-delay attribute. The value of these attribute are milliseconds. <button type= \"button\" bc-popover= \"Text and content\" bc-popover-delay= \"1000\" > Button with Popover </button>","title":"Delay"},{"location":"components/popover/#placement","text":"With the bc-popover-placement can specified how to position a popover. Possible values are Top (default), Bottom , Left or Right .","title":"Placement"},{"location":"components/popover/#html","text":"Set the bc-popover-html attribute to true to allow HTML tags within the popover content. <button type= \"button\" bc-popover= \"And here's some amazing <b>HTML</b> content. It's very <code>engaging</code>. Right?\" bc-popover-html= \"true\" > Popover with HTML </button>","title":"HTML"},{"location":"components/progress/","text":"Progress The progress is a information bar to show a progress. Use the Mecons Tag Helper to build those components with all known features. <progress bc-value=\"75\" /> Configuration Value Use the bc-value attribute to set a value for the progress. Label Add a label to your progress bar and set the bc-label attribute to true . <progress bc-value=\"75\" bc-label=\"true\" /> Size Set a size for the progress with the bc-size attribute. Possible sizes are Default , Small or Large . <progress bc-value=\"25\" bc-color=\"Primary\" bc-size=\"Small\" /> <progress bc-value=\"50\" bc-color=\"Accent\" /> <progress bc-value=\"75\" bc-color=\"Warning\" bc-size=\"Large\" /> Height It's possible to adapt the height of a progress bar with the bc-height attribute. Allowed values for this attribute are integers. The unit for this value are pixels (px). <progress bc-value=\"25\" bc-color=\"Primary\" bc-height=\"1\" /> <progress bc-value=\"50\" bc-color=\"Accent\" bc-height=\"10\" /> <progress bc-value=\"75\" bc-color=\"Warning\" bc-height=\"20\" /> <progress bc-value=\"100\" bc-color=\"Danger\" bc-height=\"40\" /> Color Use the bc-color attribute to set a color for the progress bar. <progress bc-value=\"50\" bc-color=\"Success\" /> <progress bc-value=\"75\" bc-color=\"Info\" /> <progress bc-value=\"100\" bc-color=\"Warning\" /> <progress bc-value=\"25\" bc-color=\"Danger\" /> Striped Add the bc-striped attribute and set it to true to apply a stripe gradient over the progress bar's background color. <progress bc-value=\"25\" bc-color=\"Success\" bc-striped=\"true\" /> <progress bc-value=\"50\" bc-color=\"Info\" bc-striped=\"true\" /> <progress bc-value=\"75\" bc-color=\"Warning\" bc-striped=\"true\" /> <progress bc-value=\"100\" bc-color=\"Danger\" bc-striped=\"true\" /> Animated The striped gradient can also be animated by setting the bc-animated attribute to true .","title":"Progress"},{"location":"components/progress/#progress","text":"The progress is a information bar to show a progress. Use the Mecons Tag Helper to build those components with all known features. <progress bc-value=\"75\" />","title":"Progress"},{"location":"components/progress/#configuration","text":"","title":"Configuration"},{"location":"components/progress/#value","text":"Use the bc-value attribute to set a value for the progress.","title":"Value"},{"location":"components/progress/#label","text":"Add a label to your progress bar and set the bc-label attribute to true . <progress bc-value=\"75\" bc-label=\"true\" />","title":"Label"},{"location":"components/progress/#size","text":"Set a size for the progress with the bc-size attribute. Possible sizes are Default , Small or Large . <progress bc-value=\"25\" bc-color=\"Primary\" bc-size=\"Small\" /> <progress bc-value=\"50\" bc-color=\"Accent\" /> <progress bc-value=\"75\" bc-color=\"Warning\" bc-size=\"Large\" />","title":"Size"},{"location":"components/progress/#height","text":"It's possible to adapt the height of a progress bar with the bc-height attribute. Allowed values for this attribute are integers. The unit for this value are pixels (px). <progress bc-value=\"25\" bc-color=\"Primary\" bc-height=\"1\" /> <progress bc-value=\"50\" bc-color=\"Accent\" bc-height=\"10\" /> <progress bc-value=\"75\" bc-color=\"Warning\" bc-height=\"20\" /> <progress bc-value=\"100\" bc-color=\"Danger\" bc-height=\"40\" />","title":"Height"},{"location":"components/progress/#color","text":"Use the bc-color attribute to set a color for the progress bar. <progress bc-value=\"50\" bc-color=\"Success\" /> <progress bc-value=\"75\" bc-color=\"Info\" /> <progress bc-value=\"100\" bc-color=\"Warning\" /> <progress bc-value=\"25\" bc-color=\"Danger\" />","title":"Color"},{"location":"components/progress/#striped","text":"Add the bc-striped attribute and set it to true to apply a stripe gradient over the progress bar's background color. <progress bc-value=\"25\" bc-color=\"Success\" bc-striped=\"true\" /> <progress bc-value=\"50\" bc-color=\"Info\" bc-striped=\"true\" /> <progress bc-value=\"75\" bc-color=\"Warning\" bc-striped=\"true\" /> <progress bc-value=\"100\" bc-color=\"Danger\" bc-striped=\"true\" />","title":"Striped"},{"location":"components/progress/#animated","text":"The striped gradient can also be animated by setting the bc-animated attribute to true .","title":"Animated"},{"location":"components/tooltip/","text":"Tooltip Tooltips are components to add further informations to an element. <button type= \"button\" bc-tooltip= \"Tooltip on top\" > Tooltip on top </button> Configuration Text (Mandatory) (Trigger Attribute) The bc-tooltip attribute is available on each HTML element and specifies the tooltip text. After these attribute is set for an element further attributes are available to concretize the tooltip definition. <button type= \"button\" bc-tooltip= \"Text and content\" > Button with Tooltip </button> HTML Not only text can be displayed within a tooltip, also HTML enriched content is allowed. To allow and render HTML tags within a tooltip use the bc-tooltip-html attribute. <button type= \"button\" bc-tooltip= \"<em>Tooltip</em> <u>with</u> <b>HTML</b>\" bc-tooltip-html= \"true\" > Tooltip with HTML </button> Animation By default, a tooltip comes up with an animation (fade effect). If you don't want this effect you can disable it by setting the bc-tooltip-animation attribute to false . Delay Define a delay for showing and hiding the tooltip with bc-tooltip-delay attribute. The value of these attribute are milliseconds. <button type= \"button\" bc-tooltip= \"Text and content\" bc-tooltip-delay= \"1000\" > Button with Tooltip </button> Placement With the bc-tooltip-placement can specified how to position a tooltip. Possible values are Top (default), Bottom , Left or Right .","title":"Tooltip"},{"location":"components/tooltip/#tooltip","text":"Tooltips are components to add further informations to an element. <button type= \"button\" bc-tooltip= \"Tooltip on top\" > Tooltip on top </button>","title":"Tooltip"},{"location":"components/tooltip/#configuration","text":"","title":"Configuration"},{"location":"components/tooltip/#text-mandatory-trigger-attribute","text":"The bc-tooltip attribute is available on each HTML element and specifies the tooltip text. After these attribute is set for an element further attributes are available to concretize the tooltip definition. <button type= \"button\" bc-tooltip= \"Text and content\" > Button with Tooltip </button>","title":"Text (Mandatory) (Trigger Attribute)"},{"location":"components/tooltip/#html","text":"Not only text can be displayed within a tooltip, also HTML enriched content is allowed. To allow and render HTML tags within a tooltip use the bc-tooltip-html attribute. <button type= \"button\" bc-tooltip= \"<em>Tooltip</em> <u>with</u> <b>HTML</b>\" bc-tooltip-html= \"true\" > Tooltip with HTML </button>","title":"HTML"},{"location":"components/tooltip/#animation","text":"By default, a tooltip comes up with an animation (fade effect). If you don't want this effect you can disable it by setting the bc-tooltip-animation attribute to false .","title":"Animation"},{"location":"components/tooltip/#delay","text":"Define a delay for showing and hiding the tooltip with bc-tooltip-delay attribute. The value of these attribute are milliseconds. <button type= \"button\" bc-tooltip= \"Text and content\" bc-tooltip-delay= \"1000\" > Button with Tooltip </button>","title":"Delay"},{"location":"components/tooltip/#placement","text":"With the bc-tooltip-placement can specified how to position a tooltip. Possible values are Top (default), Bottom , Left or Right .","title":"Placement"},{"location":"content/anchor/","text":"Anchor The anchor element or rather the <a> tag defines a hyperlink, which is used to link from one page to another. <a href= \"#\" bc-link= \"true\" > Basic Link </a> Configuration Link (Mandatory) (Trigger Attribute) The bc-link attribute is available on each HTML <a> tag and activate the Metronic link rendering by setting it to true . Uppercase Transform all characters of the anchor to uppercase by setting the bc-uppercase attribute to true . <a href= \"#\" bc-link= \"true\" bc-uppercase= \"true\" > Uppercase Link </a> Weight The bc-weight attribute sets how thick or thin characters in anchor should be displayed. Available weights are Bold , Bolder or Boldest . <a href= \"#\" bc-link= \"true\" bc-weight= \"Bold\" > Bold Link </a> <a href= \"#\" bc-link= \"true\" bc-weight= \"Bolder\" > Bolder Link </a> <a href= \"#\" bc-link= \"true\" bc-weight= \"Boldest\" > Boldest Link </a> Color Use the bc-color attribute to define a color for the anchor. <a href= \"#\" bc-link= \"true\" bc-color= \"Success\" > Success State </a> <a href= \"#\" bc-link= \"true\" bc-color= \"Warning\" > Warning State </a> <a href= \"#\" bc-link= \"true\" bc-color= \"Info\" > Info State </a> <a href= \"#\" bc-link= \"true\" bc-color= \"Danger\" > Danger State </a> <a href= \"#\" bc-link= \"true\" bc-color= \"Primary\" > Primary State </a> <a href= \"#\" bc-link= \"true\" bc-color= \"Brand\" > Brand State </a> <a href= \"#\" bc-link= \"true\" bc-color= \"Accent\" > Accent State </a>","title":"Anchor"},{"location":"content/anchor/#anchor","text":"The anchor element or rather the <a> tag defines a hyperlink, which is used to link from one page to another. <a href= \"#\" bc-link= \"true\" > Basic Link </a>","title":"Anchor"},{"location":"content/anchor/#configuration","text":"","title":"Configuration"},{"location":"content/anchor/#link-mandatory-trigger-attribute","text":"The bc-link attribute is available on each HTML <a> tag and activate the Metronic link rendering by setting it to true .","title":"Link (Mandatory) (Trigger Attribute)"},{"location":"content/anchor/#uppercase","text":"Transform all characters of the anchor to uppercase by setting the bc-uppercase attribute to true . <a href= \"#\" bc-link= \"true\" bc-uppercase= \"true\" > Uppercase Link </a>","title":"Uppercase"},{"location":"content/anchor/#weight","text":"The bc-weight attribute sets how thick or thin characters in anchor should be displayed. Available weights are Bold , Bolder or Boldest . <a href= \"#\" bc-link= \"true\" bc-weight= \"Bold\" > Bold Link </a> <a href= \"#\" bc-link= \"true\" bc-weight= \"Bolder\" > Bolder Link </a> <a href= \"#\" bc-link= \"true\" bc-weight= \"Boldest\" > Boldest Link </a>","title":"Weight"},{"location":"content/anchor/#color","text":"Use the bc-color attribute to define a color for the anchor. <a href= \"#\" bc-link= \"true\" bc-color= \"Success\" > Success State </a> <a href= \"#\" bc-link= \"true\" bc-color= \"Warning\" > Warning State </a> <a href= \"#\" bc-link= \"true\" bc-color= \"Info\" > Info State </a> <a href= \"#\" bc-link= \"true\" bc-color= \"Danger\" > Danger State </a> <a href= \"#\" bc-link= \"true\" bc-color= \"Primary\" > Primary State </a> <a href= \"#\" bc-link= \"true\" bc-color= \"Brand\" > Brand State </a> <a href= \"#\" bc-link= \"true\" bc-color= \"Accent\" > Accent State </a>","title":"Color"},{"location":"content/badge/","text":"Badge Badges are small count and labeling components. <h2> My Messages <badge bc-color= \"Info\" > 12 </badge></h2> Configuration Color For proper styling of a badge use the bc-color attribute. <badge> 3 </badge> <badge bc-color= \"Secondary\" > 4 </badge> <badge bc-color= \"Success\" > 7 </badge> <badge bc-color= \"Info\" > 3 </badge> <badge bc-color= \"Danger\" > 8 </badge> <badge bc-color= \"Warning\" > 7 </badge> <badge bc-color= \"Brand\" > 14 </badge> <badge bc-color= \"Accent\" > 9 </badge> <badge bc-color= \"Metal\" > 11 </badge> <badge bc-color= \"Focus\" > 15 </badge> Style Use the bc-style attribute to set a style for the badge. Possible styles are Default , Dot or Round . <h5> Dot Badges </h5> <badge bc-style= \"Dot\" bc-color= \"Primary\" ></badge> <badge bc-style= \"Dot\" bc-color= \"Secondary\" ></badge> ... <h5> Rounded Badges </h5> <badge bc-wide= \"true\" bc-style= \"Round\" bc-color= \"Primary\" > New </badge> <badge bc-wide= \"true\" bc-style= \"Round\" bc-color= \"Secondary\" > Pending </badge> ... Wide Use the bc-wide attribute to enlarge the paddings of the badge. <badge bc-wide= \"true\" bc-color= \"Primary\" > New </badge> <badge bc-wide= \"true\" bc-color= \"Secondary\" > Pending </badge> ...","title":"Badge"},{"location":"content/badge/#badge","text":"Badges are small count and labeling components. <h2> My Messages <badge bc-color= \"Info\" > 12 </badge></h2>","title":"Badge"},{"location":"content/badge/#configuration","text":"","title":"Configuration"},{"location":"content/badge/#color","text":"For proper styling of a badge use the bc-color attribute. <badge> 3 </badge> <badge bc-color= \"Secondary\" > 4 </badge> <badge bc-color= \"Success\" > 7 </badge> <badge bc-color= \"Info\" > 3 </badge> <badge bc-color= \"Danger\" > 8 </badge> <badge bc-color= \"Warning\" > 7 </badge> <badge bc-color= \"Brand\" > 14 </badge> <badge bc-color= \"Accent\" > 9 </badge> <badge bc-color= \"Metal\" > 11 </badge> <badge bc-color= \"Focus\" > 15 </badge>","title":"Color"},{"location":"content/badge/#style","text":"Use the bc-style attribute to set a style for the badge. Possible styles are Default , Dot or Round . <h5> Dot Badges </h5> <badge bc-style= \"Dot\" bc-color= \"Primary\" ></badge> <badge bc-style= \"Dot\" bc-color= \"Secondary\" ></badge> ... <h5> Rounded Badges </h5> <badge bc-wide= \"true\" bc-style= \"Round\" bc-color= \"Primary\" > New </badge> <badge bc-wide= \"true\" bc-style= \"Round\" bc-color= \"Secondary\" > Pending </badge> ...","title":"Style"},{"location":"content/badge/#wide","text":"Use the bc-wide attribute to enlarge the paddings of the badge. <badge bc-wide= \"true\" bc-color= \"Primary\" > New </badge> <badge bc-wide= \"true\" bc-color= \"Secondary\" > Pending </badge> ...","title":"Wide"},{"location":"content/icon/","text":"Icon Metronic supports the icon libraries of Flaticon, Fontawesome, Lineawesome and Socicons. To handle these icons in a easy way use the Mecons Tag Helper for icons. <h5> Fontawesome </h5> <icon bc-type= \"FA_Users\" /> <icon bc-type= \"FA_Bus\" /> <icon bc-type= \"FA_Star\" /> <h5> Flaticon </h5> <icon bc-type= \"FI_Coins\" /> <icon bc-type= \"FI_File\" /> <icon bc-type= \"FI_Imac\" /> <h5> Lineawesome </h5> <icon bc-type= \"LA_Camera\" /> <icon bc-type= \"LA_Cogs\" /> <icon bc-type= \"LA_StarO\" /> <h5> Socicons </h5> <icon bc-type= \"SI_Amazon\" /> <icon bc-type= \"SI_Blizzard\" /> <icon bc-type= \"SI_Digg\" /> Configuration Type (Mandatory) Specify an icon with the bc-type attribute. Color Set a icon color with the bc-color attribute. <icon bc-color=\"Primary\" bc-type=\"FI_Internet\" /> <icon bc-color=\"Danger\" bc-type=\"FI_Download\" /> <icon bc-color=\"Success\" bc-type=\"FI_Light\" />","title":"Icon"},{"location":"content/icon/#icon","text":"Metronic supports the icon libraries of Flaticon, Fontawesome, Lineawesome and Socicons. To handle these icons in a easy way use the Mecons Tag Helper for icons. <h5> Fontawesome </h5> <icon bc-type= \"FA_Users\" /> <icon bc-type= \"FA_Bus\" /> <icon bc-type= \"FA_Star\" /> <h5> Flaticon </h5> <icon bc-type= \"FI_Coins\" /> <icon bc-type= \"FI_File\" /> <icon bc-type= \"FI_Imac\" /> <h5> Lineawesome </h5> <icon bc-type= \"LA_Camera\" /> <icon bc-type= \"LA_Cogs\" /> <icon bc-type= \"LA_StarO\" /> <h5> Socicons </h5> <icon bc-type= \"SI_Amazon\" /> <icon bc-type= \"SI_Blizzard\" /> <icon bc-type= \"SI_Digg\" />","title":"Icon"},{"location":"content/icon/#configuration","text":"","title":"Configuration"},{"location":"content/icon/#type-mandatory","text":"Specify an icon with the bc-type attribute.","title":"Type (Mandatory)"},{"location":"content/icon/#color","text":"Set a icon color with the bc-color attribute. <icon bc-color=\"Primary\" bc-type=\"FI_Internet\" /> <icon bc-color=\"Danger\" bc-type=\"FI_Download\" /> <icon bc-color=\"Success\" bc-type=\"FI_Light\" />","title":"Color"},{"location":"content/portlet/","text":"Portlet Portlets are complex containers for content, actions and small navigations. <portlet> <portlet-header bc-title= \"Basic Portlet\" bc-subtitle= \"portlet sub title\" ></portlet-header> <portlet-body> ... </portlet-body> </portlet> Components <portlet> <portlet-header bc-title= \"Portlet Header\" bc-subtitle= \"Portlet Subheader\" > <portlet-nav> <portlet-link href= \"#\" bc-icon= \"LA_Close\" /> <portlet-link href= \"#\" bc-icon= \"LA_Refresh\" /> <portlet-link href= \"#\" bc-icon= \"LA_EllipsisH\" /> </portlet-nav> </portlet-header> <portlet-body> ... </portlet-body> <portlet-footer> Portlet Footer </portlet-footer> </portlet> Header A header for the portlet can added with the <portlet-header> tag helper. A header can contain a simple title with additional subtitle, an icon or a navigation. Body The body tag helper is the main container for portlets' content and can be added with <portlet-body> . Footer Some portlets need a footer to show detailed informations about the content. A footer can be added to the portlet with the <portlet-footer> tag helper. Navigation A portlet navigation can be added with the <portlet-nav> tag helper as a part of the header. A navigation, in turn, can contain many control elements (e.g. portlet-link ). Navigation Link A portlet navigation can be added with the <portlet-nav> tag helper as a part of the header. A navigation, in turn, can contain many control elements (e.g. portlet-link ). Configuration Round Define round corners for the portlet by setting the bc-round attribute to true . Shadow Disable the shadow for the portlet by setting the bc-shadow attribute to false . By default, a portlet has a shadow and the attribute is set to true . Border Outline the portlet with a border by setting the bc-border attribute. Possible border styles are None (default), Full or Semi . <!-- Portlet with no border and shadow --> <portlet bc-shadow= \"false\" > ... </portlet> <!-- Portlet with full border --> <portlet bc-shadow= \"false\" bc-border= \"Full\" > ... </portlet> <!-- Portlet with semi border --> <portlet bc-shadow= \"false\" bc-border= \"Semi\" > ... </portlet> Theme Define a theme for the portlet with the bc-theme attribute. Possible themes are Default , Dark and Light . Background Set a background color for the portlet with the bc-background attribute. By default the portlet has None background color. In addition use the bc-background-style attribute to set the background color only for the header ( HeadOnly ) or for the complete portlet ( Full ). <!-- Portlet with full background --> <portlet bc-theme= \"Dark\" bc-background= \"Brand\" > ... </portlet> <!-- Portlet with only header background --> <portlet bc-background= \"Brand\" bc-background-style= \"HeadOnly\" > ... </portlet> Header Configuration Titles Use the bc-title attribute to set a header text for the portlet. In addition it is possible to set a subtitle for the portlet with the bc-subtitle attribute. Icon With the bc-icon attribute it is possible to define a icon for the portlet which is displayed in the header. Color Use the bc-color attribute to define a font color for the title and icon of the portlet header. By default, the color is Dark . <portlet> <portlet-header bc-icon= \"FA_Apple\" bc-color= \"Success\" bc-title= \"Colored Header\" bc-subtitle= \"Normal styled subtitle\" ></portlet-header> <portlet-body> ... </portlet-body> </portlet>","title":"Portlet"},{"location":"content/portlet/#portlet","text":"Portlets are complex containers for content, actions and small navigations. <portlet> <portlet-header bc-title= \"Basic Portlet\" bc-subtitle= \"portlet sub title\" ></portlet-header> <portlet-body> ... </portlet-body> </portlet>","title":"Portlet"},{"location":"content/portlet/#components","text":"<portlet> <portlet-header bc-title= \"Portlet Header\" bc-subtitle= \"Portlet Subheader\" > <portlet-nav> <portlet-link href= \"#\" bc-icon= \"LA_Close\" /> <portlet-link href= \"#\" bc-icon= \"LA_Refresh\" /> <portlet-link href= \"#\" bc-icon= \"LA_EllipsisH\" /> </portlet-nav> </portlet-header> <portlet-body> ... </portlet-body> <portlet-footer> Portlet Footer </portlet-footer> </portlet>","title":"Components"},{"location":"content/portlet/#header","text":"A header for the portlet can added with the <portlet-header> tag helper. A header can contain a simple title with additional subtitle, an icon or a navigation.","title":"Header"},{"location":"content/portlet/#body","text":"The body tag helper is the main container for portlets' content and can be added with <portlet-body> .","title":"Body"},{"location":"content/portlet/#footer","text":"Some portlets need a footer to show detailed informations about the content. A footer can be added to the portlet with the <portlet-footer> tag helper.","title":"Footer"},{"location":"content/portlet/#navigation","text":"A portlet navigation can be added with the <portlet-nav> tag helper as a part of the header. A navigation, in turn, can contain many control elements (e.g. portlet-link ).","title":"Navigation"},{"location":"content/portlet/#navigation-link","text":"A portlet navigation can be added with the <portlet-nav> tag helper as a part of the header. A navigation, in turn, can contain many control elements (e.g. portlet-link ).","title":"Navigation Link"},{"location":"content/portlet/#configuration","text":"","title":"Configuration"},{"location":"content/portlet/#round","text":"Define round corners for the portlet by setting the bc-round attribute to true .","title":"Round"},{"location":"content/portlet/#shadow","text":"Disable the shadow for the portlet by setting the bc-shadow attribute to false . By default, a portlet has a shadow and the attribute is set to true .","title":"Shadow"},{"location":"content/portlet/#border","text":"Outline the portlet with a border by setting the bc-border attribute. Possible border styles are None (default), Full or Semi . <!-- Portlet with no border and shadow --> <portlet bc-shadow= \"false\" > ... </portlet> <!-- Portlet with full border --> <portlet bc-shadow= \"false\" bc-border= \"Full\" > ... </portlet> <!-- Portlet with semi border --> <portlet bc-shadow= \"false\" bc-border= \"Semi\" > ... </portlet>","title":"Border"},{"location":"content/portlet/#theme","text":"Define a theme for the portlet with the bc-theme attribute. Possible themes are Default , Dark and Light .","title":"Theme"},{"location":"content/portlet/#background","text":"Set a background color for the portlet with the bc-background attribute. By default the portlet has None background color. In addition use the bc-background-style attribute to set the background color only for the header ( HeadOnly ) or for the complete portlet ( Full ). <!-- Portlet with full background --> <portlet bc-theme= \"Dark\" bc-background= \"Brand\" > ... </portlet> <!-- Portlet with only header background --> <portlet bc-background= \"Brand\" bc-background-style= \"HeadOnly\" > ... </portlet>","title":"Background"},{"location":"content/portlet/#header-configuration","text":"","title":"Header Configuration"},{"location":"content/portlet/#titles","text":"Use the bc-title attribute to set a header text for the portlet. In addition it is possible to set a subtitle for the portlet with the bc-subtitle attribute.","title":"Titles"},{"location":"content/portlet/#icon","text":"With the bc-icon attribute it is possible to define a icon for the portlet which is displayed in the header.","title":"Icon"},{"location":"content/portlet/#color","text":"Use the bc-color attribute to define a font color for the title and icon of the portlet header. By default, the color is Dark . <portlet> <portlet-header bc-icon= \"FA_Apple\" bc-color= \"Success\" bc-title= \"Colored Header\" bc-subtitle= \"Normal styled subtitle\" ></portlet-header> <portlet-body> ... </portlet-body> </portlet>","title":"Color"},{"location":"content/progress-widget/","text":"Progress Widget The Mecons Progress Widget is used to display KPIs (Key Performance Indicator). Not only the KPI can be displayed in the widget, but also the degree of fulfillment can be visualized via a progress. <widget-progress bc-title=\"Total Profit\" bc-desc=\"All Customs Value\" bc-value=\"$18M\" bc-progress=\"78\" bc-progress-desc=\"Change\" bc-color=\"Primary\" /> Configuration Title (Mandatory) With the bc-title attribute the title of the widget can be defined. This attribute is a mandatory attribute and must be defined. Value (Mandatory) The bc-value attribute defines the KPI. This is a free text (not a number etc.) that can be defined as desired. This attribute is a mandatory attribute and must be defined. Description A description for the KPI can be added with the bc-desc attribute. Progress To show how many percent of the KPI have already been reached, a progress can be added to the widget. For this only the bc-progress attribute has to be set. In addition, a further description of this progress can be displayed with the bc-progress-desc attribute. Color Adjust the color of the KPI and the progress with the bc-color attribute. The default color is Primary .","title":"Progress Widget"},{"location":"content/progress-widget/#progress-widget","text":"The Mecons Progress Widget is used to display KPIs (Key Performance Indicator). Not only the KPI can be displayed in the widget, but also the degree of fulfillment can be visualized via a progress. <widget-progress bc-title=\"Total Profit\" bc-desc=\"All Customs Value\" bc-value=\"$18M\" bc-progress=\"78\" bc-progress-desc=\"Change\" bc-color=\"Primary\" />","title":"Progress Widget"},{"location":"content/progress-widget/#configuration","text":"","title":"Configuration"},{"location":"content/progress-widget/#title-mandatory","text":"With the bc-title attribute the title of the widget can be defined. This attribute is a mandatory attribute and must be defined.","title":"Title (Mandatory)"},{"location":"content/progress-widget/#value-mandatory","text":"The bc-value attribute defines the KPI. This is a free text (not a number etc.) that can be defined as desired. This attribute is a mandatory attribute and must be defined.","title":"Value (Mandatory)"},{"location":"content/progress-widget/#description","text":"A description for the KPI can be added with the bc-desc attribute.","title":"Description"},{"location":"content/progress-widget/#progress","text":"To show how many percent of the KPI have already been reached, a progress can be added to the widget. For this only the bc-progress attribute has to be set. In addition, a further description of this progress can be displayed with the bc-progress-desc attribute.","title":"Progress"},{"location":"content/progress-widget/#color","text":"Adjust the color of the KPI and the progress with the bc-color attribute. The default color is Primary .","title":"Color"},{"location":"content/stats-widget/","text":"Stats Widget The Mecons Stats Widget is used to display KPIs (Key Performance Indicator). Here, both a widget and several contiguous widgets can be arranged. <widget-stats> <widget-stats-item bc-title= \"Member Profit\" bc-desc= \"Average Weekly Profit\" bc-value= \"+$17,800\" bc-color= \"Brand\" /> <widget-stats-item bc-title= \"Orders\" bc-desc= \"Weekly Customer Orders\" bc-value= \"+1,800\" bc-color= \"Danger\" /> <widget-stats-item bc-title= \"Issue Reports\" bc-desc= \"System bugs and issues\" bc-value= \"-27,49%\" bc-color= \"Success\" /> </widget-stats> Item Configuration Title (Mandatory) With the bc-title attribute the title of the widget can be defined. This attribute is a mandatory attribute and must be defined. Value (Mandatory) The bc-value attribute defines the KPI. This is a free text (not a number etc.) that can be defined as desired. This attribute is a mandatory attribute and must be defined. Description A description for the KPI can be added with the bc-desc attribute. Color Adjust the color of the KPI and the progress with the bc-color attribute. The default color is Primary .","title":"Stats Widget"},{"location":"content/stats-widget/#stats-widget","text":"The Mecons Stats Widget is used to display KPIs (Key Performance Indicator). Here, both a widget and several contiguous widgets can be arranged. <widget-stats> <widget-stats-item bc-title= \"Member Profit\" bc-desc= \"Average Weekly Profit\" bc-value= \"+$17,800\" bc-color= \"Brand\" /> <widget-stats-item bc-title= \"Orders\" bc-desc= \"Weekly Customer Orders\" bc-value= \"+1,800\" bc-color= \"Danger\" /> <widget-stats-item bc-title= \"Issue Reports\" bc-desc= \"System bugs and issues\" bc-value= \"-27,49%\" bc-color= \"Success\" /> </widget-stats>","title":"Stats Widget"},{"location":"content/stats-widget/#item-configuration","text":"","title":"Item Configuration"},{"location":"content/stats-widget/#title-mandatory","text":"With the bc-title attribute the title of the widget can be defined. This attribute is a mandatory attribute and must be defined.","title":"Title (Mandatory)"},{"location":"content/stats-widget/#value-mandatory","text":"The bc-value attribute defines the KPI. This is a free text (not a number etc.) that can be defined as desired. This attribute is a mandatory attribute and must be defined.","title":"Value (Mandatory)"},{"location":"content/stats-widget/#description","text":"A description for the KPI can be added with the bc-desc attribute.","title":"Description"},{"location":"content/stats-widget/#color","text":"Adjust the color of the KPI and the progress with the bc-color attribute. The default color is Primary .","title":"Color"},{"location":"content/table/","text":"Table Opt-in and styling of Tables with the easy-to-use Mecons Tag Helpers. <table> <thead> <tr> <th> # </th> <th> First Name </th> <th> Last Name </th> <th> Username </th> </tr> </thead> <tbody> <tr> <th scope= \"row\" > 1 </th> <td> Jhon </td> <td> Stone </td> <td> @jhon </td> </tr> <tr> <th scope= \"row\" > 2 </th> <td> Lisa </td> <td> Nilson </td> <td> @lisa </td> </tr> <tr> <th scope= \"row\" > 3 </th> <td> Larry </td> <td> the Bird </td> <td> @twitter </td> </tr> </tbody> </table> Configuration Theme To change the theme of a table - with white, light or dark background - use the bc-theme attribute. Possible themes are Default (default), Light and Dark . <table bc-theme= \"Dark\" > ... </table> Striped Use the bc-striped attribute to add zebra-striping to any table row. <table bc-striped= \"true\" > ... </table> Small Add the bc-small attribute to make tables more compact by cutting cell padding in half. <table bc-small= \"true\" > ... </table> Border Add the bc-border attribute to specify the borders on all sides of the table and cells. Possible border styles are Regular (default) for only horizontal borders, Bordered for horizontal and vertical borders and Borderless for no borders. <table> ... </table> <table bc-border= \"Bordered\" > ... </table> <table bc-border= \"Borderless\" > ... </table> Responsive Create responsive tables by adding the bc-responsive attribute to make them scroll horizontally on small devices. When viewing on anything larger than 768px wide, you will not see any difference in these tables. <table bc-responsive= \"true\" > ... </table> Hover Add the bc-hover attribute to enable a hover state on table rows. <table bc-hover= \"true\" > ... </table> Head Configuration Theme Similar to themed tables, use the bc-theme attribute to make <thead> appear Default (default), Dark or Light . <table> <thead bc-theme= \"Dark\" > ... </thead> <tbody> ... </tbody> </table> <table> <thead bc-theme= \"Light\" > ... </thead> <tbody> ... </tbody> </table> Row Configuration Background Use the bc-background attribute to color table rows. <table> <thead> ... </thead> <tbody> <tr bc-background= \"Primary\" > ... </tr> <tr bc-background= \"Secondary\" > ... </tr> <tr bc-background= \"Success\" > ... </tr> <tr bc-background= \"Danger\" > ... </tr> <tr bc-background= \"Warning\" > ... </tr> <tr bc-background= \"Info\" > ... </tr> <tr bc-background= \"Brand\" > ... </tr> <tr bc-background= \"Accent\" > ... </tr> <tr bc-background= \"Focus\" > ... </tr> <tr bc-background= \"Metal\" > ... </tr> </tbody> </table>","title":"Table"},{"location":"content/table/#table","text":"Opt-in and styling of Tables with the easy-to-use Mecons Tag Helpers. <table> <thead> <tr> <th> # </th> <th> First Name </th> <th> Last Name </th> <th> Username </th> </tr> </thead> <tbody> <tr> <th scope= \"row\" > 1 </th> <td> Jhon </td> <td> Stone </td> <td> @jhon </td> </tr> <tr> <th scope= \"row\" > 2 </th> <td> Lisa </td> <td> Nilson </td> <td> @lisa </td> </tr> <tr> <th scope= \"row\" > 3 </th> <td> Larry </td> <td> the Bird </td> <td> @twitter </td> </tr> </tbody> </table>","title":"Table"},{"location":"content/table/#configuration","text":"","title":"Configuration"},{"location":"content/table/#theme","text":"To change the theme of a table - with white, light or dark background - use the bc-theme attribute. Possible themes are Default (default), Light and Dark . <table bc-theme= \"Dark\" > ... </table>","title":"Theme"},{"location":"content/table/#striped","text":"Use the bc-striped attribute to add zebra-striping to any table row. <table bc-striped= \"true\" > ... </table>","title":"Striped"},{"location":"content/table/#small","text":"Add the bc-small attribute to make tables more compact by cutting cell padding in half. <table bc-small= \"true\" > ... </table>","title":"Small"},{"location":"content/table/#border","text":"Add the bc-border attribute to specify the borders on all sides of the table and cells. Possible border styles are Regular (default) for only horizontal borders, Bordered for horizontal and vertical borders and Borderless for no borders. <table> ... </table> <table bc-border= \"Bordered\" > ... </table> <table bc-border= \"Borderless\" > ... </table>","title":"Border"},{"location":"content/table/#responsive","text":"Create responsive tables by adding the bc-responsive attribute to make them scroll horizontally on small devices. When viewing on anything larger than 768px wide, you will not see any difference in these tables. <table bc-responsive= \"true\" > ... </table>","title":"Responsive"},{"location":"content/table/#hover","text":"Add the bc-hover attribute to enable a hover state on table rows. <table bc-hover= \"true\" > ... </table>","title":"Hover"},{"location":"content/table/#head-configuration","text":"","title":"Head Configuration"},{"location":"content/table/#theme_1","text":"Similar to themed tables, use the bc-theme attribute to make <thead> appear Default (default), Dark or Light . <table> <thead bc-theme= \"Dark\" > ... </thead> <tbody> ... </tbody> </table> <table> <thead bc-theme= \"Light\" > ... </thead> <tbody> ... </tbody> </table>","title":"Theme"},{"location":"content/table/#row-configuration","text":"","title":"Row Configuration"},{"location":"content/table/#background","text":"Use the bc-background attribute to color table rows. <table> <thead> ... </thead> <tbody> <tr bc-background= \"Primary\" > ... </tr> <tr bc-background= \"Secondary\" > ... </tr> <tr bc-background= \"Success\" > ... </tr> <tr bc-background= \"Danger\" > ... </tr> <tr bc-background= \"Warning\" > ... </tr> <tr bc-background= \"Info\" > ... </tr> <tr bc-background= \"Brand\" > ... </tr> <tr bc-background= \"Accent\" > ... </tr> <tr bc-background= \"Focus\" > ... </tr> <tr bc-background= \"Metal\" > ... </tr> </tbody> </table>","title":"Background"},{"location":"content/tabs/","text":"Tabs Tabs are a single content area with multiple planels, each associated with a header in a list. <tabs> <tabs-pane bc-header= \"Home\" > <p> Consequat occaecat ullamco amet non eiusmod nostrud dolore ... </p> </tabs-pane> <tabs-pane bc-header= \"Profile\" > ... </tabs-pane> <tabs-pane bc-header= \"Settings\" > ... </tabs-pane> </tabs> Configuration Pills Use the bc-pills attribute to render the tabs as pills. <tabs bc-pills= \"true\" > <tabs-pane bc-header= \"Home\" > ... </tabs-pane> <tabs-pane bc-header= \"Profile\" > ... </tabs-pane> <tabs-pane bc-header= \"Settings\" > ... </tabs-pane> </tabs> Pane Configuration Header (Mandatory) Use the bc-header attribute to define a title for the tab. Active By default, the first tab is active on page load. If you want to modify that, use the bc-active attribute to activate another tab on startup. <tabs> <tabs-pane bc-header= \"Home\" > ... </tabs-pane> <tabs-pane bc-header= \"Profile\" bc-active= \"true\" > ... </tabs-pane> <tabs-pane bc-header= \"Settings\" > ... </tabs-pane> </tabs>","title":"Tabs"},{"location":"content/tabs/#tabs","text":"Tabs are a single content area with multiple planels, each associated with a header in a list. <tabs> <tabs-pane bc-header= \"Home\" > <p> Consequat occaecat ullamco amet non eiusmod nostrud dolore ... </p> </tabs-pane> <tabs-pane bc-header= \"Profile\" > ... </tabs-pane> <tabs-pane bc-header= \"Settings\" > ... </tabs-pane> </tabs>","title":"Tabs"},{"location":"content/tabs/#configuration","text":"","title":"Configuration"},{"location":"content/tabs/#pills","text":"Use the bc-pills attribute to render the tabs as pills. <tabs bc-pills= \"true\" > <tabs-pane bc-header= \"Home\" > ... </tabs-pane> <tabs-pane bc-header= \"Profile\" > ... </tabs-pane> <tabs-pane bc-header= \"Settings\" > ... </tabs-pane> </tabs>","title":"Pills"},{"location":"content/tabs/#pane-configuration","text":"","title":"Pane Configuration"},{"location":"content/tabs/#header-mandatory","text":"Use the bc-header attribute to define a title for the tab.","title":"Header (Mandatory)"},{"location":"content/tabs/#active","text":"By default, the first tab is active on page load. If you want to modify that, use the bc-active attribute to activate another tab on startup. <tabs> <tabs-pane bc-header= \"Home\" > ... </tabs-pane> <tabs-pane bc-header= \"Profile\" bc-active= \"true\" > ... </tabs-pane> <tabs-pane bc-header= \"Settings\" > ... </tabs-pane> </tabs>","title":"Active"},{"location":"content/timeline/","text":"Timeline A Timeline is a structured representation of events and their chronologically occurance. <timeline> <timeline-item bc-time= \"Just Now\" > 12 new users registered and pending for activation </timeline-item> <timeline-item bc-time= \"14 mins\" > Scheduled system reboot completed <badge bc-wide= \"true\" > completed </badge> </timeline-item> <timeline-item bc-time= \"20 mins\" > New order has been planced and pending for processing </timeline-item> </timeline> Item Configuration Time (Mandatory) Set a timestamp for the timeline item with the bc-time attribute. Color A color for the timeline item can be set with the bc-color attribute. <timeline> <timeline-item bc-color= \"Success\" bc-time= \"Just Now\" > ... </timeline-item> <timeline-item bc-color= \"Warning\" bc-time= \"14 mins\" > ... </timeline-item> <timeline-item bc-color= \"Danger\" bc-time= \"20 mins\" > ... </timeline-item> </timeline> Icon Set an icon for the timeline item with the bc-icon attribute. <timeline> <timeline-item bc-time= \"Just Now\" bc-icon= \"FI_Share\" > ... </timeline-item> <timeline-item bc-time= \"14 mins\" bc-icon= \"FI_Users\" > ... </timeline-item> <timeline-item bc-time= \"20 mins\" bc-icon= \"FI_Placeholder\" > ... </timeline-item> </timeline>","title":"Timeline"},{"location":"content/timeline/#timeline","text":"A Timeline is a structured representation of events and their chronologically occurance. <timeline> <timeline-item bc-time= \"Just Now\" > 12 new users registered and pending for activation </timeline-item> <timeline-item bc-time= \"14 mins\" > Scheduled system reboot completed <badge bc-wide= \"true\" > completed </badge> </timeline-item> <timeline-item bc-time= \"20 mins\" > New order has been planced and pending for processing </timeline-item> </timeline>","title":"Timeline"},{"location":"content/timeline/#item-configuration","text":"","title":"Item Configuration"},{"location":"content/timeline/#time-mandatory","text":"Set a timestamp for the timeline item with the bc-time attribute.","title":"Time (Mandatory)"},{"location":"content/timeline/#color","text":"A color for the timeline item can be set with the bc-color attribute. <timeline> <timeline-item bc-color= \"Success\" bc-time= \"Just Now\" > ... </timeline-item> <timeline-item bc-color= \"Warning\" bc-time= \"14 mins\" > ... </timeline-item> <timeline-item bc-color= \"Danger\" bc-time= \"20 mins\" > ... </timeline-item> </timeline>","title":"Color"},{"location":"content/timeline/#icon","text":"Set an icon for the timeline item with the bc-icon attribute. <timeline> <timeline-item bc-time= \"Just Now\" bc-icon= \"FI_Share\" > ... </timeline-item> <timeline-item bc-time= \"14 mins\" bc-icon= \"FI_Users\" > ... </timeline-item> <timeline-item bc-time= \"20 mins\" bc-icon= \"FI_Placeholder\" > ... </timeline-item> </timeline>","title":"Icon"},{"location":"forms/button-group/","text":"Button Group The Button Group groups a seriesof buttons together on a single line. <button-group> <button> Left </button> <button> Middle </button> <button> Right </button> </button-group> Configuration Vertical Make a set of buttons appear vertically stacked rather than horizontally by adding the bc-vertical attribute. <button-group bc-vertical= \"true\" > <button> Top </button> <button> Middle </button> <button> Bottom </button> </button-group> Size Define a size of the button group with the bc-size attribute. Available sizes are Default , Large or Small .","title":"Button Group"},{"location":"forms/button-group/#button-group","text":"The Button Group groups a seriesof buttons together on a single line. <button-group> <button> Left </button> <button> Middle </button> <button> Right </button> </button-group>","title":"Button Group"},{"location":"forms/button-group/#configuration","text":"","title":"Configuration"},{"location":"forms/button-group/#vertical","text":"Make a set of buttons appear vertically stacked rather than horizontally by adding the bc-vertical attribute. <button-group bc-vertical= \"true\" > <button> Top </button> <button> Middle </button> <button> Bottom </button> </button-group>","title":"Vertical"},{"location":"forms/button-group/#size","text":"Define a size of the button group with the bc-size attribute. Available sizes are Default , Large or Small .","title":"Size"},{"location":"forms/button/","text":"Button Buttons are elements for actions in forms, dialogs and more. With the Mecons Tag Helper it is very easy to use these Buttons and adjust them to your needs. <button type= \"button\" > Primary </button> <button type= \"button\" bc-color= \"Secondary\" > Secondary </button> ... Configuration Color Use the bc-color attribute to modify the styling of the button. Outline In need of a button, but not the hefty background colors they bring? Set the bc-outline attribute to true to remove all background images and color on any button. <button type= \"button\" bc-outline= \"true\" > Primary </button> <button type= \"button\" bc-outline= \"true\" bc-color= \"Secondary\" > Secondary </button> ... Style Render a button in different styles by setting the bc-style attribute. Possible values are Default , Square or Pill . <button type= \"button\" > Default </button> <button type= \"button\" bc-style= \"Square\" > Square </button> <button type= \"button\" bc-style= \"Pill\" > Pill </button> Size Add the bc-size attribute to define a size for the button. Possible sizes are Default , Large or Small . <button type= \"button\" bc-size= \"Large\" bc-color= \"Primary\" > Large button </button> <button type= \"button\" bc-color= \"Secondary\" > Default button </button> <button type= \"button\" bc-size= \"Small\" bc-color= \"Success\" > Small button </button> Wide Use the bc-wide attribute to enlarge the paddings of the button. <button type= \"button\" bc-color= \"Success\" bc-wide= \"true\" > Success </button> <button type= \"button\" bc-color= \"Danger\" bc-wide= \"true\" > Danger </button> Block Create block level buttons - those that span the full width of a parent - by adding the bc-block attribute. <button type= \"button\" bc-block= \"true\" bc-color= \"Primary\" > Primary </button> <button type= \"button\" bc-block= \"true\" bc-color= \"Success\" > Success </button> Active Buttons will appear pressed (with a darker background, darker border, and inset shadow) when the bc-active attribute is set to true . Disable Make buttons look inactive by adding the bc-disable attribute and set it to true . Icon It is also possible to equip the button with an icon, which is displayed next to the description text. For this purpose, an icon can be defined with the bc-icon attribute. <button type= \"button\" bc-color= \"Primary\" bc-icon= \"FA_Archive\" > Primary </button> <button type= \"button\" bc-color= \"Secondary\" bc-icon= \"FA_User\" > Secondary </button> If a button has no description, only the icon is displayed as an icon-only button. <button type= \"button\" bc-color= \"Primary\" bc-icon= \"FA_Archive\" ></button> <button type= \"button\" bc-color= \"Secondary\" bc-icon= \"FA_User\" ></button> Link Configuration Button (Trigger Attribute) You can also use the button attributes with <a> tags and render a link like a button. To do that it is important to set the trigger attribute bc-button for a link. <a bc-button= \"true\" bc-color= \"Primary\" > Primary </a>","title":"Button"},{"location":"forms/button/#button","text":"Buttons are elements for actions in forms, dialogs and more. With the Mecons Tag Helper it is very easy to use these Buttons and adjust them to your needs. <button type= \"button\" > Primary </button> <button type= \"button\" bc-color= \"Secondary\" > Secondary </button> ...","title":"Button"},{"location":"forms/button/#configuration","text":"","title":"Configuration"},{"location":"forms/button/#color","text":"Use the bc-color attribute to modify the styling of the button.","title":"Color"},{"location":"forms/button/#outline","text":"In need of a button, but not the hefty background colors they bring? Set the bc-outline attribute to true to remove all background images and color on any button. <button type= \"button\" bc-outline= \"true\" > Primary </button> <button type= \"button\" bc-outline= \"true\" bc-color= \"Secondary\" > Secondary </button> ...","title":"Outline"},{"location":"forms/button/#style","text":"Render a button in different styles by setting the bc-style attribute. Possible values are Default , Square or Pill . <button type= \"button\" > Default </button> <button type= \"button\" bc-style= \"Square\" > Square </button> <button type= \"button\" bc-style= \"Pill\" > Pill </button>","title":"Style"},{"location":"forms/button/#size","text":"Add the bc-size attribute to define a size for the button. Possible sizes are Default , Large or Small . <button type= \"button\" bc-size= \"Large\" bc-color= \"Primary\" > Large button </button> <button type= \"button\" bc-color= \"Secondary\" > Default button </button> <button type= \"button\" bc-size= \"Small\" bc-color= \"Success\" > Small button </button>","title":"Size"},{"location":"forms/button/#wide","text":"Use the bc-wide attribute to enlarge the paddings of the button. <button type= \"button\" bc-color= \"Success\" bc-wide= \"true\" > Success </button> <button type= \"button\" bc-color= \"Danger\" bc-wide= \"true\" > Danger </button>","title":"Wide"},{"location":"forms/button/#block","text":"Create block level buttons - those that span the full width of a parent - by adding the bc-block attribute. <button type= \"button\" bc-block= \"true\" bc-color= \"Primary\" > Primary </button> <button type= \"button\" bc-block= \"true\" bc-color= \"Success\" > Success </button>","title":"Block"},{"location":"forms/button/#active","text":"Buttons will appear pressed (with a darker background, darker border, and inset shadow) when the bc-active attribute is set to true .","title":"Active"},{"location":"forms/button/#disable","text":"Make buttons look inactive by adding the bc-disable attribute and set it to true .","title":"Disable"},{"location":"forms/button/#icon","text":"It is also possible to equip the button with an icon, which is displayed next to the description text. For this purpose, an icon can be defined with the bc-icon attribute. <button type= \"button\" bc-color= \"Primary\" bc-icon= \"FA_Archive\" > Primary </button> <button type= \"button\" bc-color= \"Secondary\" bc-icon= \"FA_User\" > Secondary </button> If a button has no description, only the icon is displayed as an icon-only button. <button type= \"button\" bc-color= \"Primary\" bc-icon= \"FA_Archive\" ></button> <button type= \"button\" bc-color= \"Secondary\" bc-icon= \"FA_User\" ></button>","title":"Icon"},{"location":"forms/button/#link-configuration","text":"","title":"Link Configuration"},{"location":"forms/button/#button-trigger-attribute","text":"You can also use the button attributes with <a> tags and render a link like a button. To do that it is important to set the trigger attribute bc-button for a link. <a bc-button= \"true\" bc-color= \"Primary\" > Primary </a>","title":"Button (Trigger Attribute)"},{"location":"forms/checkbox-list/","text":"Checkbox List The <checkbox-list> tag helper is a wrapper for checkbox input elements. For a correct rendering it is necessary to embedding all checkboxes into a checkbox list. <checkbox-list bc-label= \"Default Checkboxes\" > <input type= \"checkbox\" bc-label= \"Default\" /> <input type= \"checkbox\" bc-label= \"Disabled\" disabled /> <input type= \"checkbox\" bc-label= \"Checked\" checked /> </checkbox-list> Configuration Inline Checkboxes can rendered on the same horizontal row by adding the bc-inline attribute to the list wrapper. <checkbox-list bc-inline= \"true\" > ... </checkbox-list> Label To set an label for the list of checkboxes use the bc-label attribute. <checkbox-list bc-label= \"Default Checkboxes\" > ... </checkbox-list> Help To set a help text for a list of checkboxes use the bc-help attribute. <checkbox-list bc-label= \"Inline Checkboxes\" bc-help= \"Some help text goes here\" bc-inline= \"true\" > ... </checkbox-list> Items To bind a list of items to a Checkbox List use the bc-items attribute. This attribute accepts an object of List<SelectListItem> . <!-- VIEW --> @model BSolutions.Mecons.Test.Models.DataBindingViewModel <checkbox-list bc-label= \"Equipment\" bc-items= \"Model.Equipments\" ></checkbox-list> // VIEW MODEL public class DataBindingViewModel { public List < SelectListItem > Equipments { get ; set ; } = new List < SelectListItem >(); public DataBindingViewModel () { this . Equipments . Add ( new SelectListItem { Value = \"0\" , Text = \"Laptop\" }); this . Equipments . Add ( new SelectListItem { Value = \"1\" , Text = \"Smartphone\" }); this . Equipments . Add ( new SelectListItem { Value = \"2\" , Text = \"PC\" }); } } Data Binding Model binding in ASP.NET Core MVC maps data from HTTP requests to action method parameters. With asp-for attribute of the Checkbox List it is possible to bind checked options to a model parameter. <!-- VIEW --> @model BSolutions.Mecons.Test.Models.DataBindingViewModel <checkbox-list asp-for= \"Equipment\" bc-items= \"Model.Equipments\" ></checkbox-list> // VIEW MODEL public class DataBindingViewModel { // Selected Equipment [Display(Name = \"Equipment\")] public List < string > Equipment { get ; set ; } // Available Equipment public List < SelectListItem > Equipments { get ; set ; } = new List < SelectListItem >(); } // CONTROLLER public IActionResult DataBinding () { var model = new DataBindingViewModel (); model . Equipments . Add ( new SelectListItem { Value = \"0\" , Text = \"Laptop\" }); model . Equipments . Add ( new SelectListItem { Value = \"1\" , Text = \"Smartphone\" }); model . Equipments . Add ( new SelectListItem { Value = \"2\" , Text = \"PC\" }); return View ( model ); } [HttpPost] public IActionResult DataBinding ( DataBindingViewModel model ) { foreach ( var equipment in model . Equipment ) { // Do something with selected equipment } }","title":"Checkbox List"},{"location":"forms/checkbox-list/#checkbox-list","text":"The <checkbox-list> tag helper is a wrapper for checkbox input elements. For a correct rendering it is necessary to embedding all checkboxes into a checkbox list. <checkbox-list bc-label= \"Default Checkboxes\" > <input type= \"checkbox\" bc-label= \"Default\" /> <input type= \"checkbox\" bc-label= \"Disabled\" disabled /> <input type= \"checkbox\" bc-label= \"Checked\" checked /> </checkbox-list>","title":"Checkbox List"},{"location":"forms/checkbox-list/#configuration","text":"","title":"Configuration"},{"location":"forms/checkbox-list/#inline","text":"Checkboxes can rendered on the same horizontal row by adding the bc-inline attribute to the list wrapper. <checkbox-list bc-inline= \"true\" > ... </checkbox-list>","title":"Inline"},{"location":"forms/checkbox-list/#label","text":"To set an label for the list of checkboxes use the bc-label attribute. <checkbox-list bc-label= \"Default Checkboxes\" > ... </checkbox-list>","title":"Label"},{"location":"forms/checkbox-list/#help","text":"To set a help text for a list of checkboxes use the bc-help attribute. <checkbox-list bc-label= \"Inline Checkboxes\" bc-help= \"Some help text goes here\" bc-inline= \"true\" > ... </checkbox-list>","title":"Help"},{"location":"forms/checkbox-list/#items","text":"To bind a list of items to a Checkbox List use the bc-items attribute. This attribute accepts an object of List<SelectListItem> . <!-- VIEW --> @model BSolutions.Mecons.Test.Models.DataBindingViewModel <checkbox-list bc-label= \"Equipment\" bc-items= \"Model.Equipments\" ></checkbox-list> // VIEW MODEL public class DataBindingViewModel { public List < SelectListItem > Equipments { get ; set ; } = new List < SelectListItem >(); public DataBindingViewModel () { this . Equipments . Add ( new SelectListItem { Value = \"0\" , Text = \"Laptop\" }); this . Equipments . Add ( new SelectListItem { Value = \"1\" , Text = \"Smartphone\" }); this . Equipments . Add ( new SelectListItem { Value = \"2\" , Text = \"PC\" }); } }","title":"Items"},{"location":"forms/checkbox-list/#data-binding","text":"Model binding in ASP.NET Core MVC maps data from HTTP requests to action method parameters. With asp-for attribute of the Checkbox List it is possible to bind checked options to a model parameter. <!-- VIEW --> @model BSolutions.Mecons.Test.Models.DataBindingViewModel <checkbox-list asp-for= \"Equipment\" bc-items= \"Model.Equipments\" ></checkbox-list> // VIEW MODEL public class DataBindingViewModel { // Selected Equipment [Display(Name = \"Equipment\")] public List < string > Equipment { get ; set ; } // Available Equipment public List < SelectListItem > Equipments { get ; set ; } = new List < SelectListItem >(); } // CONTROLLER public IActionResult DataBinding () { var model = new DataBindingViewModel (); model . Equipments . Add ( new SelectListItem { Value = \"0\" , Text = \"Laptop\" }); model . Equipments . Add ( new SelectListItem { Value = \"1\" , Text = \"Smartphone\" }); model . Equipments . Add ( new SelectListItem { Value = \"2\" , Text = \"PC\" }); return View ( model ); } [HttpPost] public IActionResult DataBinding ( DataBindingViewModel model ) { foreach ( var equipment in model . Equipment ) { // Do something with selected equipment } }","title":"Data Binding"},{"location":"forms/data-annotation/","text":"Data Annotation For Mecons, extended data annotation is available, which will explain in this article. Data Annotation in .NET Core Framework means add extra meaning to the data by adding attribute tags. The advantage of using Data Annotation feature is that by applying Data Attributes we can manage the data definition in a single place and do not need re-write the same rules in multiple places. Display Attributes Display Attributes are used to specify how data from a member of a view model is displayed in the UI. Mecons provides some custom Display Attributes or rather extends extisting attributes: BreconsDisplayAttribute A Brecons own attribute to specify a display name and an optionally description for a property. This attribute is used when an own localization logic is used in an application and the DisplayAttribute of .NET isn't usable. DisplayAttribute Provides a general-purpose attribute that lets you specify localizable strings for types and members of entity partial classes. DisplayNameAttribute Specifies the display name for a property, event, or public void method which takes no arguments. Brecons Display Attribute If you have a custom localization logic in your application it might be useful to have a custom display attribute to realize the translations. In this case create a custom display attribute and inherit from the BSolutions.Brecons.Core.Attributes.BreconsDisplayAttribute . Afterwards override the DisplayName and the Description property to insert custom translation logic. <!-- VIEW --> @model BSolutions.Mecons.Test.Models.DataBindingViewModel <form-group> <input type= \"text\" asp-for= \"Product\" /> </form-group> // MODEL public class DataBindingViewModel { [CustomDisplay(Name = \"Product.Name\", Description = \"Product.Description\")] public string Product { get ; set ; } = \"Mecons Tag Helper Library\" ; } // CUSTOM DISPLAY ATTRIBUTE public class CustomDisplayAttribute : BreconsDisplayAttribute { // Your localization source provider private readonly ILocalizationSource _localizationSource = new LocalizationSource (); public override string DisplayName { get { // Get translation for display name return this . _localizationSource . Get ( this . _displayName ); } } public override string DisplayName { get { // Get translation for description return this . _localizationSource . Get ( this . _description ); } } } Display Attribute Furthermore, the classic DisplayAttribute is also available to set the value of the label and help. This attribute is also fully supported by the Mecons tag helpers. <!-- VIEW --> @model BSolutions.Mecons.Test.Models.DataBindingViewModel <form-group> <input type= \"text\" asp-for= \"Product\" /> </form-group> // MODEL public class DataBindingViewModel { [Display(Name = \"Product Name\", Description = \"The name of the product\")] public string Product { get ; set ; } = \"Mecons Tag Helper Library\" ; }","title":"Data Annotation"},{"location":"forms/data-annotation/#data-annotation","text":"For Mecons, extended data annotation is available, which will explain in this article. Data Annotation in .NET Core Framework means add extra meaning to the data by adding attribute tags. The advantage of using Data Annotation feature is that by applying Data Attributes we can manage the data definition in a single place and do not need re-write the same rules in multiple places.","title":"Data Annotation"},{"location":"forms/data-annotation/#display-attributes","text":"Display Attributes are used to specify how data from a member of a view model is displayed in the UI. Mecons provides some custom Display Attributes or rather extends extisting attributes: BreconsDisplayAttribute A Brecons own attribute to specify a display name and an optionally description for a property. This attribute is used when an own localization logic is used in an application and the DisplayAttribute of .NET isn't usable. DisplayAttribute Provides a general-purpose attribute that lets you specify localizable strings for types and members of entity partial classes. DisplayNameAttribute Specifies the display name for a property, event, or public void method which takes no arguments.","title":"Display Attributes"},{"location":"forms/data-annotation/#brecons-display-attribute","text":"If you have a custom localization logic in your application it might be useful to have a custom display attribute to realize the translations. In this case create a custom display attribute and inherit from the BSolutions.Brecons.Core.Attributes.BreconsDisplayAttribute . Afterwards override the DisplayName and the Description property to insert custom translation logic. <!-- VIEW --> @model BSolutions.Mecons.Test.Models.DataBindingViewModel <form-group> <input type= \"text\" asp-for= \"Product\" /> </form-group> // MODEL public class DataBindingViewModel { [CustomDisplay(Name = \"Product.Name\", Description = \"Product.Description\")] public string Product { get ; set ; } = \"Mecons Tag Helper Library\" ; } // CUSTOM DISPLAY ATTRIBUTE public class CustomDisplayAttribute : BreconsDisplayAttribute { // Your localization source provider private readonly ILocalizationSource _localizationSource = new LocalizationSource (); public override string DisplayName { get { // Get translation for display name return this . _localizationSource . Get ( this . _displayName ); } } public override string DisplayName { get { // Get translation for description return this . _localizationSource . Get ( this . _description ); } } }","title":"Brecons Display Attribute"},{"location":"forms/data-annotation/#display-attribute","text":"Furthermore, the classic DisplayAttribute is also available to set the value of the label and help. This attribute is also fully supported by the Mecons tag helpers. <!-- VIEW --> @model BSolutions.Mecons.Test.Models.DataBindingViewModel <form-group> <input type= \"text\" asp-for= \"Product\" /> </form-group> // MODEL public class DataBindingViewModel { [Display(Name = \"Product Name\", Description = \"The name of the product\")] public string Product { get ; set ; } = \"Mecons Tag Helper Library\" ; }","title":"Display Attribute"},{"location":"forms/datepicker/","text":"Datepicker The Datepicker provides a flexible datepicker widget in the Bootstrap style. <datepicker bc-label=\"Birthday\" /> Configuration Orientation The bc-orientation attribute allows to set a fixed placement of the datepicker popup. By default, the orientation is Auto and the picker will be placed smart. <datepicker bc-label=\"Birthday\" bc-orientation=\"BottomLeft\" /> Icon Set an icon addon for the datepicker with the bc-icon attribute. <datepicker bc-label=\"Birthday\" bc-icon=\"LA_CalendarCheckO\" /> Auto Close Set the bc-close attribute to true to close the datepicker popup immediately when a date is selected. Calendar Weeks Set the bc-weeks attribute to true to show week numbers to the left of week rows. <datepicker bc-label=\"Birthday\" bc-weeks=\"true\" /> Date Format Set a date format for the datepicker with the bc-format attribute. To specify a custom date format use the default C# Date and Time Format Strings . <datepicker bc-label=\"Date Format\" bc-format=\"dd.mm.yyyy\" /> Start and End Date Specify the earliest date that may be selected with the bc-start-date attribute. All earlier dates will be disabled. Specify the latest date that may be selected with the bc-end-date attribute. All later dates will be disabled. The date should be in local timezone and the string must be parsable with the JavaScript Date Formats . <!-- Disable all dates before today --> <datepicker bc-label=\"Start Date\" bc-start-date=\"0d\" /> <!-- Disable all dates after today --> <datepicker bc-label=\"End Date\" bc-end-date=\"0d\" />","title":"Datepicker"},{"location":"forms/datepicker/#datepicker","text":"The Datepicker provides a flexible datepicker widget in the Bootstrap style. <datepicker bc-label=\"Birthday\" />","title":"Datepicker"},{"location":"forms/datepicker/#configuration","text":"","title":"Configuration"},{"location":"forms/datepicker/#orientation","text":"The bc-orientation attribute allows to set a fixed placement of the datepicker popup. By default, the orientation is Auto and the picker will be placed smart. <datepicker bc-label=\"Birthday\" bc-orientation=\"BottomLeft\" />","title":"Orientation"},{"location":"forms/datepicker/#icon","text":"Set an icon addon for the datepicker with the bc-icon attribute. <datepicker bc-label=\"Birthday\" bc-icon=\"LA_CalendarCheckO\" />","title":"Icon"},{"location":"forms/datepicker/#auto-close","text":"Set the bc-close attribute to true to close the datepicker popup immediately when a date is selected.","title":"Auto Close"},{"location":"forms/datepicker/#calendar-weeks","text":"Set the bc-weeks attribute to true to show week numbers to the left of week rows. <datepicker bc-label=\"Birthday\" bc-weeks=\"true\" />","title":"Calendar Weeks"},{"location":"forms/datepicker/#date-format","text":"Set a date format for the datepicker with the bc-format attribute. To specify a custom date format use the default C# Date and Time Format Strings . <datepicker bc-label=\"Date Format\" bc-format=\"dd.mm.yyyy\" />","title":"Date Format"},{"location":"forms/datepicker/#start-and-end-date","text":"Specify the earliest date that may be selected with the bc-start-date attribute. All earlier dates will be disabled. Specify the latest date that may be selected with the bc-end-date attribute. All later dates will be disabled. The date should be in local timezone and the string must be parsable with the JavaScript Date Formats . <!-- Disable all dates before today --> <datepicker bc-label=\"Start Date\" bc-start-date=\"0d\" /> <!-- Disable all dates after today --> <datepicker bc-label=\"End Date\" bc-end-date=\"0d\" />","title":"Start and End Date"},{"location":"forms/daterangepicker/","text":"Daterangepicker The Daterangepicker Tag Helper is a JavaScript component for choosing date ranges, dates and times. <daterangepicker bc-label=\"Start Time\" /> Configuration Start and End Date Use the bc-start-date attribute to set the beginning date of the initially selected date range. With the bc-end-date attribute set the end date of the initially selected date range. <daterangepicker bc-label=\"Holidays\" bc-start-date=\"@DateTime.Now\" bc-end-date=\"@DateTime.Now.AddDays(14)\" /> Min and Max Date Set the earliest date a user may select with the bc-min-date attribute. To set the latest date use the bc-max-date attribute. <daterangepicker bc-label=\"Booking\" bc-min-date=\"@DateTime.Now.AddDays(-7)\" bc-max-date=\"@DateTime.Now.AddDays(7)\" /> Format The date format can be specified with the bc-format attribute. The format is specified as C# date and time format string. <daterangepicker bc-label=\"Default Format\" /> <daterangepicker bc-label=\"Specific Format\" bc-format=\"dd/MM/yyyy\" /> Timepicker Set the bc-timepicker attribute to true to add select boxes to choose times in addition to dates. In addition use the bc-timepicker-step attribute to set the increment steps of minutes selection list (i.e. 30 to allow only selection of times ending in 0 or 30). By default, the increment of minutes is 30 . <daterangepicker bc-label=\"Date and Time\" bc-timepicker=\"true\" bc-timepicker-step=\"15\" /> Icon Set an icon addon for the daterangepicker with the bc-icon attribute. <daterangepicker bc-label=\"Holidays\" bc-icon=\"FA_Calendar\" /> Button Color Use the bc-apply-color and bc-cancel-color attribute to define a color for the corresponding button. By default, the Apply Button color is Primary and the Cancel Button color is Secondary . <daterangepicker bc-label=\"Start Time\" bc-apply-color=\"Success\" bc-cancel-color=\"Danger\" /> Data Binding The Daterangepicker Tag Helper provides two properties for the start date and end date data binding. The start date can be bound to the asp-for attribute while the end date is bound to the asp-for2 attribute. <!-- VIEW --> <form asp-action= \"CallbackAction\" method= \"post\" > <form-group> <daterangepicker asp-for= \"StartDate\" asp-for2= \"EndDate\" bc-format= \"dd/MM/yyyy\" /> </form-group> </form> // MODEL [Display(Name = \"Timespan\", Description = \"Please enter a timespan here.\")] public DateTime StartDate { get ; set ; } = DateTime . Now . AddDays (- 3 ); public DateTime EndDate { get ; set ; } = DateTime . Now . AddDays ( 3 );","title":"Daterangepicker"},{"location":"forms/daterangepicker/#daterangepicker","text":"The Daterangepicker Tag Helper is a JavaScript component for choosing date ranges, dates and times. <daterangepicker bc-label=\"Start Time\" />","title":"Daterangepicker"},{"location":"forms/daterangepicker/#configuration","text":"","title":"Configuration"},{"location":"forms/daterangepicker/#start-and-end-date","text":"Use the bc-start-date attribute to set the beginning date of the initially selected date range. With the bc-end-date attribute set the end date of the initially selected date range. <daterangepicker bc-label=\"Holidays\" bc-start-date=\"@DateTime.Now\" bc-end-date=\"@DateTime.Now.AddDays(14)\" />","title":"Start and End Date"},{"location":"forms/daterangepicker/#min-and-max-date","text":"Set the earliest date a user may select with the bc-min-date attribute. To set the latest date use the bc-max-date attribute. <daterangepicker bc-label=\"Booking\" bc-min-date=\"@DateTime.Now.AddDays(-7)\" bc-max-date=\"@DateTime.Now.AddDays(7)\" />","title":"Min and Max Date"},{"location":"forms/daterangepicker/#format","text":"The date format can be specified with the bc-format attribute. The format is specified as C# date and time format string. <daterangepicker bc-label=\"Default Format\" /> <daterangepicker bc-label=\"Specific Format\" bc-format=\"dd/MM/yyyy\" />","title":"Format"},{"location":"forms/daterangepicker/#timepicker","text":"Set the bc-timepicker attribute to true to add select boxes to choose times in addition to dates. In addition use the bc-timepicker-step attribute to set the increment steps of minutes selection list (i.e. 30 to allow only selection of times ending in 0 or 30). By default, the increment of minutes is 30 . <daterangepicker bc-label=\"Date and Time\" bc-timepicker=\"true\" bc-timepicker-step=\"15\" />","title":"Timepicker"},{"location":"forms/daterangepicker/#icon","text":"Set an icon addon for the daterangepicker with the bc-icon attribute. <daterangepicker bc-label=\"Holidays\" bc-icon=\"FA_Calendar\" />","title":"Icon"},{"location":"forms/daterangepicker/#button-color","text":"Use the bc-apply-color and bc-cancel-color attribute to define a color for the corresponding button. By default, the Apply Button color is Primary and the Cancel Button color is Secondary . <daterangepicker bc-label=\"Start Time\" bc-apply-color=\"Success\" bc-cancel-color=\"Danger\" />","title":"Button Color"},{"location":"forms/daterangepicker/#data-binding","text":"The Daterangepicker Tag Helper provides two properties for the start date and end date data binding. The start date can be bound to the asp-for attribute while the end date is bound to the asp-for2 attribute. <!-- VIEW --> <form asp-action= \"CallbackAction\" method= \"post\" > <form-group> <daterangepicker asp-for= \"StartDate\" asp-for2= \"EndDate\" bc-format= \"dd/MM/yyyy\" /> </form-group> </form> // MODEL [Display(Name = \"Timespan\", Description = \"Please enter a timespan here.\")] public DateTime StartDate { get ; set ; } = DateTime . Now . AddDays (- 3 ); public DateTime EndDate { get ; set ; } = DateTime . Now . AddDays ( 3 );","title":"Data Binding"},{"location":"forms/dropdown-button/","text":"Dropdown Button Dropdown Buttons are contextual overlays for displaying lists of links and more. <button-dropdown bc-title= \"Primary\" > <a href= \"#\" > Action </a> <a href= \"#\" bc-disabled= \"true\" > Disabled Action </a> <a href= \"#\" > Another Action </a> </button-dropdown> <button-dropdown bc-title= \"Secondary\" bc-color= \"Secondary\" > ... </button-dropdown> Components Components are tag helpers that are available within a <button-dropdown> . Menu Item The <a> tag represents an item within the dropdown menu. These regular HTML link tag is extended by a Mecons tag helper which provides further attributes. Divider The <divider> tag helper helps you to seperate groups of related menu items. Header With the <header> tag helper it is possible to add a header to label sections of actions in any dropdown menu. Configuration Title (Mandatory) The bc-title attribute specifies a title for the button that triggers the dropdown menu. Dropup Set the bc-dropup attribute to trigger the dropdown menu above the button. <button-dropdown bc-title= \"Dropup\" bc-dropup= \"true\" > ... </button-dropdown> Color Use the bc-color attribute to modify the styling of the dropdown button. Possible styles are Primary (default), Secondary , Success , Danger , Warning , Info , Light or Dark . <button-dropdown bc-title= \"Dropdown Button with long Title\" bc-alignment-right= \"true\" > ... </button-dropdown> Size Add the bc-size attribute to define a size for the dropdown button. Possible sizes are Default , Large or Small . <button-dropdown bc-title= \"Large Dropdown\" bc-size= \"Large\" > ... </button-dropdown> <button-dropdown bc-title= \"Normal Dropdown\" > ... </button-dropdown> <button-dropdown bc-title= \"Small Dropdown\" bc-size= \"Small\" > ... </button-dropdown> Split The bc-split attribute seperates the dropdown menu trigger from the rest of the button. This make it possible to allocate an seperate action to the button. <button-dropdown bc-title= \"Dropdown Button\" bc-split= \"true\" > ... </button-dropdown> Menu Item Configuration Disable Add the bc-disable attribute to disable an menu item in the dropdown.","title":"Dropdown Button"},{"location":"forms/dropdown-button/#dropdown-button","text":"Dropdown Buttons are contextual overlays for displaying lists of links and more. <button-dropdown bc-title= \"Primary\" > <a href= \"#\" > Action </a> <a href= \"#\" bc-disabled= \"true\" > Disabled Action </a> <a href= \"#\" > Another Action </a> </button-dropdown> <button-dropdown bc-title= \"Secondary\" bc-color= \"Secondary\" > ... </button-dropdown>","title":"Dropdown Button"},{"location":"forms/dropdown-button/#components","text":"Components are tag helpers that are available within a <button-dropdown> .","title":"Components"},{"location":"forms/dropdown-button/#menu-item","text":"The <a> tag represents an item within the dropdown menu. These regular HTML link tag is extended by a Mecons tag helper which provides further attributes.","title":"Menu Item"},{"location":"forms/dropdown-button/#divider","text":"The <divider> tag helper helps you to seperate groups of related menu items.","title":"Divider"},{"location":"forms/dropdown-button/#header","text":"With the <header> tag helper it is possible to add a header to label sections of actions in any dropdown menu.","title":"Header"},{"location":"forms/dropdown-button/#configuration","text":"","title":"Configuration"},{"location":"forms/dropdown-button/#title-mandatory","text":"The bc-title attribute specifies a title for the button that triggers the dropdown menu.","title":"Title (Mandatory)"},{"location":"forms/dropdown-button/#dropup","text":"Set the bc-dropup attribute to trigger the dropdown menu above the button. <button-dropdown bc-title= \"Dropup\" bc-dropup= \"true\" > ... </button-dropdown>","title":"Dropup"},{"location":"forms/dropdown-button/#color","text":"Use the bc-color attribute to modify the styling of the dropdown button. Possible styles are Primary (default), Secondary , Success , Danger , Warning , Info , Light or Dark . <button-dropdown bc-title= \"Dropdown Button with long Title\" bc-alignment-right= \"true\" > ... </button-dropdown>","title":"Color"},{"location":"forms/dropdown-button/#size","text":"Add the bc-size attribute to define a size for the dropdown button. Possible sizes are Default , Large or Small . <button-dropdown bc-title= \"Large Dropdown\" bc-size= \"Large\" > ... </button-dropdown> <button-dropdown bc-title= \"Normal Dropdown\" > ... </button-dropdown> <button-dropdown bc-title= \"Small Dropdown\" bc-size= \"Small\" > ... </button-dropdown>","title":"Size"},{"location":"forms/dropdown-button/#split","text":"The bc-split attribute seperates the dropdown menu trigger from the rest of the button. This make it possible to allocate an seperate action to the button. <button-dropdown bc-title= \"Dropdown Button\" bc-split= \"true\" > ... </button-dropdown>","title":"Split"},{"location":"forms/dropdown-button/#menu-item-configuration","text":"","title":"Menu Item Configuration"},{"location":"forms/dropdown-button/#disable","text":"Add the bc-disable attribute to disable an menu item in the dropdown.","title":"Disable"},{"location":"forms/dropzone/","text":"Dropzone DropzoneJS is an open source library that provides drag\u2019n\u2019drop file uploads with image previews. <dropzone bc-url=\"/Forms/Dropzone\" /> Configuration Url (Mandatory) The bc-url attribute specifies the target to which the dropped files will be uploaded. This attribute is mandatory and without it, the dropzone will not run correctly. Title With the bc-title attribute it is possible to override the default title of the Dropzone. If the bc-title attribute is not set, a localized default message will be displayed. <!-- Default Dropzone Title --> <dropzone bc-url=\"/Forms/Dropzone\" /> <!-- Custom Dropzone Title --> <dropzone bc-url=\"/Forms/Dropzone\" bc-title=\"This is a custom title of the dropzone.\" /> Description Describe the Dropzone in detail with the bc-desc attribute. The description will be displayed below the title. <dropzone bc-url=\"/Forms/Dropzone\" bc-desc=\"Only image, pdf and psd files are allowed for upload\" /> Maximum File Size The bc-max-file-size attribute defines the maximum file size of an uploaded file. By default the file size haven't any limit. The maximum file size is expressed as an integer and in Megabyte (MB). Maximum Files The bc-max-files attribute can be used to limit the maximum number of files that will be handled by the Dropzone. Remove Files If the bc-remove-files attribute is set to true this will add a link to every file preview to remove or cancel (if already uploading) the file. Accepted Files With the bc-accepted attribute it is possible to allow only certain MIME Types for the Dropzone. Multiple MIME types are specified as a comma-separated list (e.g. image/*,application/pdf,.psd ). If the Dropzone is clickable this option will also be used as accept parameter on the hidden file input as well. Clickable By default, the Dropzone element itself is clickable. This means that clicking on the Dropzone opens a file selection dialog. To disable this functionality set the bc-clickable attribute to false . Color Use the bc-color attribute to set a color for the Dropzone. <dropzone bc-url=\"/Forms/Dropzone\" bc-color=\"Primary\" /> Parameter The name of the file parameter that gets transferred to the server will specified with the bc-name attribute. By default, the parameter name is file . Server-side Processing How to transfer the files collected in a Dropzone to the server is described in this section. View First a Dropzone must be defined in a view. The important thing here is either to deliberately define a custom parameter name that will later be used to transfer the files to the server, or to use the default parameter name ( file ). <!-- Dropzone.cshtml --> <dropzone bc-url=\"/Forms/Dropzone\" /> Controller On server-side it es very easy to receive the uploaded file. Use the IFormFile interface and a parameter with the same name of the parameter defined in the Dropzone (by default file ). // Forms Controller public IActionResult Dropzone () { return View (); } [HttpPost] public IActionResult Dropzone ( IFormFile file ) { // Process the transfered file // Return a Json result which is readable for the Dropzone return Json ( new { success = true , response = \"File uploaded.\" }); }","title":"Dropzone"},{"location":"forms/dropzone/#dropzone","text":"DropzoneJS is an open source library that provides drag\u2019n\u2019drop file uploads with image previews. <dropzone bc-url=\"/Forms/Dropzone\" />","title":"Dropzone"},{"location":"forms/dropzone/#configuration","text":"","title":"Configuration"},{"location":"forms/dropzone/#url-mandatory","text":"The bc-url attribute specifies the target to which the dropped files will be uploaded. This attribute is mandatory and without it, the dropzone will not run correctly.","title":"Url (Mandatory)"},{"location":"forms/dropzone/#title","text":"With the bc-title attribute it is possible to override the default title of the Dropzone. If the bc-title attribute is not set, a localized default message will be displayed. <!-- Default Dropzone Title --> <dropzone bc-url=\"/Forms/Dropzone\" /> <!-- Custom Dropzone Title --> <dropzone bc-url=\"/Forms/Dropzone\" bc-title=\"This is a custom title of the dropzone.\" />","title":"Title"},{"location":"forms/dropzone/#description","text":"Describe the Dropzone in detail with the bc-desc attribute. The description will be displayed below the title. <dropzone bc-url=\"/Forms/Dropzone\" bc-desc=\"Only image, pdf and psd files are allowed for upload\" />","title":"Description"},{"location":"forms/dropzone/#maximum-file-size","text":"The bc-max-file-size attribute defines the maximum file size of an uploaded file. By default the file size haven't any limit. The maximum file size is expressed as an integer and in Megabyte (MB).","title":"Maximum File Size"},{"location":"forms/dropzone/#maximum-files","text":"The bc-max-files attribute can be used to limit the maximum number of files that will be handled by the Dropzone.","title":"Maximum Files"},{"location":"forms/dropzone/#remove-files","text":"If the bc-remove-files attribute is set to true this will add a link to every file preview to remove or cancel (if already uploading) the file.","title":"Remove Files"},{"location":"forms/dropzone/#accepted-files","text":"With the bc-accepted attribute it is possible to allow only certain MIME Types for the Dropzone. Multiple MIME types are specified as a comma-separated list (e.g. image/*,application/pdf,.psd ). If the Dropzone is clickable this option will also be used as accept parameter on the hidden file input as well.","title":"Accepted Files"},{"location":"forms/dropzone/#clickable","text":"By default, the Dropzone element itself is clickable. This means that clicking on the Dropzone opens a file selection dialog. To disable this functionality set the bc-clickable attribute to false .","title":"Clickable"},{"location":"forms/dropzone/#color","text":"Use the bc-color attribute to set a color for the Dropzone. <dropzone bc-url=\"/Forms/Dropzone\" bc-color=\"Primary\" />","title":"Color"},{"location":"forms/dropzone/#parameter","text":"The name of the file parameter that gets transferred to the server will specified with the bc-name attribute. By default, the parameter name is file .","title":"Parameter"},{"location":"forms/dropzone/#server-side-processing","text":"How to transfer the files collected in a Dropzone to the server is described in this section.","title":"Server-side Processing"},{"location":"forms/dropzone/#view","text":"First a Dropzone must be defined in a view. The important thing here is either to deliberately define a custom parameter name that will later be used to transfer the files to the server, or to use the default parameter name ( file ). <!-- Dropzone.cshtml --> <dropzone bc-url=\"/Forms/Dropzone\" />","title":"View"},{"location":"forms/dropzone/#controller","text":"On server-side it es very easy to receive the uploaded file. Use the IFormFile interface and a parameter with the same name of the parameter defined in the Dropzone (by default file ). // Forms Controller public IActionResult Dropzone () { return View (); } [HttpPost] public IActionResult Dropzone ( IFormFile file ) { // Process the transfered file // Return a Json result which is readable for the Dropzone return Json ( new { success = true , response = \"File uploaded.\" }); }","title":"Controller"},{"location":"forms/form-controls/","text":"Controls The Mecons Controls are a collection of default HTML form controls and extended components with appealing styles. General Configuration The following configuration attributes are available for all form controls respectively their tag helpers. Label Define a label for form controls by adding the bc-label attribute or use the <label> tag helper within the <form-group> . <!-- Label via form control attribute --> <form-group> <input type= \"text\" bc-label= \"Text Control Label\" /> </form-group> <!-- Label via label tag helper --> <form-group> <label> Text Control Label </label> <input type= \"text\" /> </form-group> Help A block-level help text for form controls can be created by using the bc-help attribute or use the <help> tag helper within the <form-group> . <!-- Block-level help via form control attribute --> <form-group> <input type= \"text\" bc-label= \"Text Control Label\" bc-help= \"A block-level help text\" /> </form-group> <!-- Block-level help via help tag helper --> <form-group> <input type= \"text\" bc-label= \"Text Control Label\" /> <help> A block-level help text </help> </form-group> Size Set the height of a form control by adding the bc-size attribute. Available sizes are Default , Large or Small . <form-group> <input type= \"text\" bc-label= \"Large input\" placeholder= \"Large input\" bc-size= \"Large\" /> </form-group> <form-group> <input type= \"text\" bc-label= \"Default input\" placeholder= \"Default input\" /> </form-group> <form-group> <input type= \"text\" bc-label= \"Small input\" placeholder= \"Small input\" bc-size= \"Small\" /> </form-group> Required Mark a control as required with the bc-required attribute. This adds the HTML required attribute to the control markup und mark the control label as required with a star (*). <form-group> <input bc-label= \"E-mail address\" bc-required= \"true\" type= \"text\" /> </form-group> Data Binding All Mecons Form Controls supports the standardized data binding approach of ASP.NET Core. That means that all Mecons Tag Helpers in a form context provides a asp-for attribute. Validation If a property is bound to the control (via asp-for attribute) and the bc-validation attribute is set to true , a validation message element will be displayed on invalid state. These element can be used from the validation mechanism of ASP.NET MVC. Note It is also possible to activate the validation messages for each form control by an form level attribute. For more info check the Validation page. It is also possible to activate the validation messages for each form control by an form level attribute. For more info check the Validation page.","title":"Form Controls"},{"location":"forms/form-controls/#controls","text":"The Mecons Controls are a collection of default HTML form controls and extended components with appealing styles.","title":"Controls"},{"location":"forms/form-controls/#general-configuration","text":"The following configuration attributes are available for all form controls respectively their tag helpers.","title":"General Configuration"},{"location":"forms/form-controls/#label","text":"Define a label for form controls by adding the bc-label attribute or use the <label> tag helper within the <form-group> . <!-- Label via form control attribute --> <form-group> <input type= \"text\" bc-label= \"Text Control Label\" /> </form-group> <!-- Label via label tag helper --> <form-group> <label> Text Control Label </label> <input type= \"text\" /> </form-group>","title":"Label"},{"location":"forms/form-controls/#help","text":"A block-level help text for form controls can be created by using the bc-help attribute or use the <help> tag helper within the <form-group> . <!-- Block-level help via form control attribute --> <form-group> <input type= \"text\" bc-label= \"Text Control Label\" bc-help= \"A block-level help text\" /> </form-group> <!-- Block-level help via help tag helper --> <form-group> <input type= \"text\" bc-label= \"Text Control Label\" /> <help> A block-level help text </help> </form-group>","title":"Help"},{"location":"forms/form-controls/#size","text":"Set the height of a form control by adding the bc-size attribute. Available sizes are Default , Large or Small . <form-group> <input type= \"text\" bc-label= \"Large input\" placeholder= \"Large input\" bc-size= \"Large\" /> </form-group> <form-group> <input type= \"text\" bc-label= \"Default input\" placeholder= \"Default input\" /> </form-group> <form-group> <input type= \"text\" bc-label= \"Small input\" placeholder= \"Small input\" bc-size= \"Small\" /> </form-group>","title":"Size"},{"location":"forms/form-controls/#required","text":"Mark a control as required with the bc-required attribute. This adds the HTML required attribute to the control markup und mark the control label as required with a star (*). <form-group> <input bc-label= \"E-mail address\" bc-required= \"true\" type= \"text\" /> </form-group>","title":"Required"},{"location":"forms/form-controls/#data-binding","text":"All Mecons Form Controls supports the standardized data binding approach of ASP.NET Core. That means that all Mecons Tag Helpers in a form context provides a asp-for attribute.","title":"Data Binding"},{"location":"forms/form-controls/#validation","text":"If a property is bound to the control (via asp-for attribute) and the bc-validation attribute is set to true , a validation message element will be displayed on invalid state. These element can be used from the validation mechanism of ASP.NET MVC. Note It is also possible to activate the validation messages for each form control by an form level attribute. For more info check the Validation page. It is also possible to activate the validation messages for each form control by an form level attribute. For more info check the Validation page.","title":"Validation"},{"location":"forms/form-layout/","text":"Form Layout Use Mecons to render a form in a horizontal or vertical layout. Form Structure The form structure in Mecons is the same as in Bootstrap. The main container is a <form> tag which includes the form controls. Each form control should be surrounded with an <form-group> tag helper. A <form-group> can also contains a <label> or a <help> . <form> <form-group> <!-- Form Control --> </form-group> <form-group> <!-- Form Control --> </form-group> ... </form> Form Configuration Horizontal Set the bc-horizontal attribute to true if you want a horizontal form layout. Note If you choose a horizontal form layout it is necessary to define at least one label width for your favorite Responsive Breakpoint . For further informations check the following chapter \"Label Width\". Label Width (Mandatory on Horizontal Layout) Set at least one label width if you render your form horizontal. It's possible to set a label width for each Responsive Breakpoint . Choose the bc-label-width-{breakpoint} attribute to set a label width for a breakpoint. If you define only a label width for a large breakpoint (e.g. bc-label-width-lg or bc-label-width-xl ), the labels get a full width on smaller breakpoints and the conclusion is a vertical form. Label Display To hide control labels on all devices execept screen readers, set the bc-labels-sr-only to true . Form Group Configuration State Use the bc-state attribute to set a validation state for the control within the form group. Available states are Success , Warning or Danger . <form-group bc-state= \"Success\" > <input type= \"text\" bc-label= \"Input with success\" /> </form-group> <form-group bc-state= \"Warning\" > <input type= \"text\" bc-label= \"Input with warning\" /> </form-group> <form-group bc-state= \"Danger\" > <input type= \"text\" bc-label= \"Input with danger\" /> </form-group> Vertical Form In a vertical form each control and its corresponding label and help text will placed in a separate row. <form> <form-group> <input type= \"text\" bc-label= \"User name\" bc-help= \"Usually your e-mail address\" /> </form-group> <form-group> <input type= \"password\" bc-label= \"Password\" /> </form-group> <button type= \"submit\" > Log in </button> </form> Horizontal Form In a horizontal form each control and its corresponding label placed in the same row. The help text will placed under the control. <form bc-horizontal= \"true\" bc-label-width-md= \"4\" > <form-group> <input type= \"text\" bc-label= \"User name\" bc-help= \"Usually your e-mail address\" /> </form-group> <form-group> <input type= \"password\" bc-label= \"Password\" /> </form-group> <button type= \"submit\" > Log in </button> </form>","title":"Form Layout"},{"location":"forms/form-layout/#form-layout","text":"Use Mecons to render a form in a horizontal or vertical layout.","title":"Form Layout"},{"location":"forms/form-layout/#form-structure","text":"The form structure in Mecons is the same as in Bootstrap. The main container is a <form> tag which includes the form controls. Each form control should be surrounded with an <form-group> tag helper. A <form-group> can also contains a <label> or a <help> . <form> <form-group> <!-- Form Control --> </form-group> <form-group> <!-- Form Control --> </form-group> ... </form>","title":"Form Structure"},{"location":"forms/form-layout/#form-configuration","text":"","title":"Form Configuration"},{"location":"forms/form-layout/#horizontal","text":"Set the bc-horizontal attribute to true if you want a horizontal form layout. Note If you choose a horizontal form layout it is necessary to define at least one label width for your favorite Responsive Breakpoint . For further informations check the following chapter \"Label Width\".","title":"Horizontal"},{"location":"forms/form-layout/#label-width-mandatory-on-horizontal-layout","text":"Set at least one label width if you render your form horizontal. It's possible to set a label width for each Responsive Breakpoint . Choose the bc-label-width-{breakpoint} attribute to set a label width for a breakpoint. If you define only a label width for a large breakpoint (e.g. bc-label-width-lg or bc-label-width-xl ), the labels get a full width on smaller breakpoints and the conclusion is a vertical form.","title":"Label Width (Mandatory on Horizontal Layout)"},{"location":"forms/form-layout/#label-display","text":"To hide control labels on all devices execept screen readers, set the bc-labels-sr-only to true .","title":"Label Display"},{"location":"forms/form-layout/#form-group-configuration","text":"","title":"Form Group Configuration"},{"location":"forms/form-layout/#state","text":"Use the bc-state attribute to set a validation state for the control within the form group. Available states are Success , Warning or Danger . <form-group bc-state= \"Success\" > <input type= \"text\" bc-label= \"Input with success\" /> </form-group> <form-group bc-state= \"Warning\" > <input type= \"text\" bc-label= \"Input with warning\" /> </form-group> <form-group bc-state= \"Danger\" > <input type= \"text\" bc-label= \"Input with danger\" /> </form-group>","title":"State"},{"location":"forms/form-layout/#vertical-form","text":"In a vertical form each control and its corresponding label and help text will placed in a separate row. <form> <form-group> <input type= \"text\" bc-label= \"User name\" bc-help= \"Usually your e-mail address\" /> </form-group> <form-group> <input type= \"password\" bc-label= \"Password\" /> </form-group> <button type= \"submit\" > Log in </button> </form>","title":"Vertical Form"},{"location":"forms/form-layout/#horizontal-form","text":"In a horizontal form each control and its corresponding label placed in the same row. The help text will placed under the control. <form bc-horizontal= \"true\" bc-label-width-md= \"4\" > <form-group> <input type= \"text\" bc-label= \"User name\" bc-help= \"Usually your e-mail address\" /> </form-group> <form-group> <input type= \"password\" bc-label= \"Password\" /> </form-group> <button type= \"submit\" > Log in </button> </form>","title":"Horizontal Form"},{"location":"forms/input/","text":"Text (Single-line Input) The text input will be specified with a <input type=\"text\" /> tag and provides a single-line text input field. <input type=\"text\" bc-label=\"Text Control\" /> Configuration Addons Place an text add-on on each side of an text input with the bc-pre-text or bc-post-text attribute. < form - group > < input type = \"text\" placeholder = \"Left Addon\" bc - pre - text = \"@\" /> </ form - group > < form - group > < input type = \"text\" placeholder = \"Right Addon\" bc - post - text = \"@example.com\" /> </ form - group > < form - group > < input type = \"text\" placeholder = \"Left & Right Addon\" bc - pre - text = \"#\" bc - post - text = \"px\" /> </ form - group > To add an icon on left or right side of an input control, use the bc-pre-icon or bc-post-icon attribute. <form-group> <input type= \"text\" placeholder= \"Left Addon\" bc-pre-icon= \"LA_ExclamationTriangle\" /> </form-group> <form-group> <input type= \"text\" placeholder= \"Right Addon\" bc-post-icon= \"LA_Group\" /> </form-group> <form-group> <input type= \"text\" placeholder= \"Left & Right Addon\" bc-pre-icon= \"FI_Refresh\" bc-post-icon= \"FI_Music1\" /> </form-group> Please note: These attributes only working on input controls of type text , password , email or number .","title":"Text"},{"location":"forms/input/#text-single-line-input","text":"The text input will be specified with a <input type=\"text\" /> tag and provides a single-line text input field. <input type=\"text\" bc-label=\"Text Control\" />","title":"Text (Single-line Input)"},{"location":"forms/input/#configuration","text":"","title":"Configuration"},{"location":"forms/input/#addons","text":"Place an text add-on on each side of an text input with the bc-pre-text or bc-post-text attribute. < form - group > < input type = \"text\" placeholder = \"Left Addon\" bc - pre - text = \"@\" /> </ form - group > < form - group > < input type = \"text\" placeholder = \"Right Addon\" bc - post - text = \"@example.com\" /> </ form - group > < form - group > < input type = \"text\" placeholder = \"Left & Right Addon\" bc - pre - text = \"#\" bc - post - text = \"px\" /> </ form - group > To add an icon on left or right side of an input control, use the bc-pre-icon or bc-post-icon attribute. <form-group> <input type= \"text\" placeholder= \"Left Addon\" bc-pre-icon= \"LA_ExclamationTriangle\" /> </form-group> <form-group> <input type= \"text\" placeholder= \"Right Addon\" bc-post-icon= \"LA_Group\" /> </form-group> <form-group> <input type= \"text\" placeholder= \"Left & Right Addon\" bc-pre-icon= \"FI_Refresh\" bc-post-icon= \"FI_Music1\" /> </form-group> Please note: These attributes only working on input controls of type text , password , email or number .","title":"Addons"},{"location":"forms/label-and-help/","text":"Label & Help With a label or a help text it is possible to desribe a control in more detail. Label A label shows a name for a control and can be defined with the <label> tag within a <form-group> . <form-group> <label for= \"input1\" > Text Control Label </label> <input id= \"input1\" type= \"text\" /> </form-group> Screenreader Set the bc-sronly attribute to hide the label on all devices except screen readers. Help A block-level help text for form controls can be created with the <help> tag helper within the <form-group> . <form-group> <input type= \"text\" bc-label= \"Text Control Label\" /> <help> A block-level help text </help> </form-group>","title":"Label and Help"},{"location":"forms/label-and-help/#label-help","text":"With a label or a help text it is possible to desribe a control in more detail.","title":"Label &amp; Help"},{"location":"forms/label-and-help/#label","text":"A label shows a name for a control and can be defined with the <label> tag within a <form-group> . <form-group> <label for= \"input1\" > Text Control Label </label> <input id= \"input1\" type= \"text\" /> </form-group>","title":"Label"},{"location":"forms/label-and-help/#screenreader","text":"Set the bc-sronly attribute to hide the label on all devices except screen readers.","title":"Screenreader"},{"location":"forms/label-and-help/#help","text":"A block-level help text for form controls can be created with the <help> tag helper within the <form-group> . <form-group> <input type= \"text\" bc-label= \"Text Control Label\" /> <help> A block-level help text </help> </form-group>","title":"Help"},{"location":"forms/markdown/","text":"Markdown The Markdown Tag Helper is an editor for Markdown language. <markdown bc-height=\"200\" /> Configuration Height Set the editor height with the bc-height attribute. Allowed values for this attribute are integers. The unit for this value are pixels (px).","title":"Markdown"},{"location":"forms/markdown/#markdown","text":"The Markdown Tag Helper is an editor for Markdown language. <markdown bc-height=\"200\" />","title":"Markdown"},{"location":"forms/markdown/#configuration","text":"","title":"Configuration"},{"location":"forms/markdown/#height","text":"Set the editor height with the bc-height attribute. Allowed values for this attribute are integers. The unit for this value are pixels (px).","title":"Height"},{"location":"forms/nouislider/","text":"noUiSlider noUiSlider is a range slider without bloat. It offers a ton off features, and it is as small, lightweight and minimal as possible, which is great for mobile use on the many supported devices, including iPhone, iPad, Android devices & Windows (Phone) 8 desktops, tablets and all-in-ones. It works on desktops too, of course! <nouislider bc-slider-1=\"20\" /> Configuration Sliders (Mandatory) The bc-slider-* attribute defines an handle and its start position. The bc-slider-* attribute is a dictionary attribute and can be assigned multiple times (in this case the * must be replaced by a unique identifier, e.g. bc-slider-1 ). <nouislider bc-slider-1=\"20\" /> <nouislider bc-slider-1=\"30.5\" bc-slider-2=\"80\" /> Connectors A connector is the space between two handles or between a handle and the start respectively the end point of a slider. These spaces can be filled with one color. Use the bc-connectors attribute to define these spaces as a connector or not. The connectors will be defined with a comma-separated list of Boolean values. <nouislider bc-slider-1=\"20\" bc-slider-2=\"80\" bc-connectors=\"false,true,false\" /> <nouislider bc-slider-1=\"20\" bc-connectors=\"true,false\" /> Color With the noUiSlider Tag Helper it is possible to colorize the handles and the connectors of a slider. Set a color for all handles with the bc-color-sliders attribute. <nouislider bc-slider-1=\"20\" bc-slider-2=\"80\" bc-color-sliders=\"Brand\" /> To set a color for the connectors use the bc-color-connectors attribute. <nouislider bc-slider-1=\"20\" bc-slider-2=\"80\" bc-connectors=\"false,true,false\" bc-color-sliders=\"Danger\" bc-color-connectors=\"Brand\" /> Step By default, the slider slides fluently. In order to make the handles jump between intervals, you can set the bc-step attribute. The interval is specified as an integer. Minimum Set the minimum value of the slider with the bc-min attribute. By default, the minimum is set to 0 . Maximum Set the maximum value of the slider with the bc-max attribute. By default, the maximum is set to 100 . Margin When using two handles, the minimum distance between the handles can be set using the bc-margin attribute. The margin value is relative to the value set in bc-min and bc-max . This option is only available on linear sliders. Limit The bc-limit attribute is the oposite of the bc-margin attribute, limiting the maximum distance between two handles. As with the bc-margin attribute, the limit option can only be used on linear sliders. Orientation The orientation of the slider can be set by the bc-orientation attribute. Possible values are Horizontal (default) or Vertical . Vertical sliders don't assume a default height, so you'll need to set one. You can use any unit you want, including % or px . < nouislider bc-slider-1 = \"20\" bc-orientation = \"Vertical\" style = \"height: 100px;\" /> Direction By default the sliders are top-to-bottom and left-to-right, but you can change this using the bc-direction attribute, which decides where the upper side of the slider is. Possible directions are Ltr (default) or Rtl . <nouislider bc-slider-1=\"20\" bc-connectors=\"true,false\" /> <nouislider bc-slider-1=\"20\" bc-connectors=\"true,false\" bc-direction=\"Rtl\" /> Scale / Pips To improve the overview, a noUiSlider can be extended with a scale and pips. There are several ways to define scales / pips. Modes A scale for the noUiSlider can be defined in several modes. The mode of the scale is be defined with the bc-pips-mode attribute. Possible modes are Range , Steps , Positions , Count and Values . Range The Range mode uses the slider range to determine where the pips should be. A pip is generated for every percentage specified. <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Range\" /> Steps In Steps mode, a pip is generated for every step of the slider defined with the bc-step attribute. In addition, each pip of a step still gets a label with the respective value. <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Steps\" bc-step=\"5\" /> <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Steps\" bc-step=\"10\" /> Positions In Positions mode, pips are generated at percentage-based positions on the slider. <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Positions\" bc-pips-values=\"0, 25, 50, 75, 100\" /> <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Positions\" bc-pips-values=\"0, 10, 20, 30, 40, 50, 100\" /> Count The Count mode can be used to generate a fixed number of pips. <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Count\" bc-pips-values=\"5\" /> <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Count\" bc-pips-values=\"11\" /> Values The Values mode is similar to Positions , but it accepts values instead of percentages. <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Values\" bc-pips-values=\"0, 10, 20, 50, 100\" /> <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Values\" bc-pips-values=\"0, 15, 30, 45, 100\" /> Density The density value controls how many pips are placed on one percent of the slider range. With the default value of 1 , there is one pip per percent. For a value of 2 , a pip is placed for every 2 percent. A value below one will place more than one pip per percentage. <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Range\" /> <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Range\" bc-pips-density=\"2\" /> <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Range\" bc-pips-density=\"4\" /> Stepped By setting the bc-pips-stepped attribute to true , the pip values will be round to the slider stepping. <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Positions\" bc-step=\"2\" bc-pips-values=\"0, 25, 50, 75, 100\" /> <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Positions\" bc-step=\"2\" bc-pips-values=\"0, 25, 50, 75, 100\" bc-pips-stepped=\"true\" /> Data Binding View The noUiSlider Tag Helper provides the dictionary attribute asp-for-* to bind a view model property to a slider. The attribute can be assigned multiple times within one Tag Helper. For this, only the * is to be replaced by the name of the slider: <form asp-controller= \"Slider\" asp-action= \"NoUiSlider\" method= \"post\" > <form-group> <nouislider asp-for-1= \"Slider1\" asp-for-2= \"Slider2\" /> </form-group> <button type= \"submit\" > Post Data </button> </form> View Model public class NoUiSliderViewModel { public double Slider1 { get ; set ; } public double Slider2 { get ; set ; } } Controller public class SliderController : Controller { public IActionResult NoUiSlider () { // Instance a view model with default slider values NoUiSliderViewModel model = new NoUiSliderViewModel { Slider1 = 33.3 , Slider2 = 66.6 }; return View ( model ); } [HttpPost] public IActionResult NoUiSlider ( NoUiSliderViewModel model ) { // Read value of first Slider var sliderValue1 = model . Slider1 ; // Read value of second Slider var sliderValue2 = model . Slider2 ; return View ( model ); } }","title":"NoUiSlider"},{"location":"forms/nouislider/#nouislider","text":"noUiSlider is a range slider without bloat. It offers a ton off features, and it is as small, lightweight and minimal as possible, which is great for mobile use on the many supported devices, including iPhone, iPad, Android devices & Windows (Phone) 8 desktops, tablets and all-in-ones. It works on desktops too, of course! <nouislider bc-slider-1=\"20\" />","title":"noUiSlider"},{"location":"forms/nouislider/#configuration","text":"","title":"Configuration"},{"location":"forms/nouislider/#sliders-mandatory","text":"The bc-slider-* attribute defines an handle and its start position. The bc-slider-* attribute is a dictionary attribute and can be assigned multiple times (in this case the * must be replaced by a unique identifier, e.g. bc-slider-1 ). <nouislider bc-slider-1=\"20\" /> <nouislider bc-slider-1=\"30.5\" bc-slider-2=\"80\" />","title":"Sliders (Mandatory)"},{"location":"forms/nouislider/#connectors","text":"A connector is the space between two handles or between a handle and the start respectively the end point of a slider. These spaces can be filled with one color. Use the bc-connectors attribute to define these spaces as a connector or not. The connectors will be defined with a comma-separated list of Boolean values. <nouislider bc-slider-1=\"20\" bc-slider-2=\"80\" bc-connectors=\"false,true,false\" /> <nouislider bc-slider-1=\"20\" bc-connectors=\"true,false\" />","title":"Connectors"},{"location":"forms/nouislider/#color","text":"With the noUiSlider Tag Helper it is possible to colorize the handles and the connectors of a slider. Set a color for all handles with the bc-color-sliders attribute. <nouislider bc-slider-1=\"20\" bc-slider-2=\"80\" bc-color-sliders=\"Brand\" /> To set a color for the connectors use the bc-color-connectors attribute. <nouislider bc-slider-1=\"20\" bc-slider-2=\"80\" bc-connectors=\"false,true,false\" bc-color-sliders=\"Danger\" bc-color-connectors=\"Brand\" />","title":"Color"},{"location":"forms/nouislider/#step","text":"By default, the slider slides fluently. In order to make the handles jump between intervals, you can set the bc-step attribute. The interval is specified as an integer.","title":"Step"},{"location":"forms/nouislider/#minimum","text":"Set the minimum value of the slider with the bc-min attribute. By default, the minimum is set to 0 .","title":"Minimum"},{"location":"forms/nouislider/#maximum","text":"Set the maximum value of the slider with the bc-max attribute. By default, the maximum is set to 100 .","title":"Maximum"},{"location":"forms/nouislider/#margin","text":"When using two handles, the minimum distance between the handles can be set using the bc-margin attribute. The margin value is relative to the value set in bc-min and bc-max . This option is only available on linear sliders.","title":"Margin"},{"location":"forms/nouislider/#limit","text":"The bc-limit attribute is the oposite of the bc-margin attribute, limiting the maximum distance between two handles. As with the bc-margin attribute, the limit option can only be used on linear sliders.","title":"Limit"},{"location":"forms/nouislider/#orientation","text":"The orientation of the slider can be set by the bc-orientation attribute. Possible values are Horizontal (default) or Vertical . Vertical sliders don't assume a default height, so you'll need to set one. You can use any unit you want, including % or px . < nouislider bc-slider-1 = \"20\" bc-orientation = \"Vertical\" style = \"height: 100px;\" />","title":"Orientation"},{"location":"forms/nouislider/#direction","text":"By default the sliders are top-to-bottom and left-to-right, but you can change this using the bc-direction attribute, which decides where the upper side of the slider is. Possible directions are Ltr (default) or Rtl . <nouislider bc-slider-1=\"20\" bc-connectors=\"true,false\" /> <nouislider bc-slider-1=\"20\" bc-connectors=\"true,false\" bc-direction=\"Rtl\" />","title":"Direction"},{"location":"forms/nouislider/#scale-pips","text":"To improve the overview, a noUiSlider can be extended with a scale and pips. There are several ways to define scales / pips.","title":"Scale / Pips"},{"location":"forms/nouislider/#modes","text":"A scale for the noUiSlider can be defined in several modes. The mode of the scale is be defined with the bc-pips-mode attribute. Possible modes are Range , Steps , Positions , Count and Values .","title":"Modes"},{"location":"forms/nouislider/#range","text":"The Range mode uses the slider range to determine where the pips should be. A pip is generated for every percentage specified. <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Range\" />","title":"Range"},{"location":"forms/nouislider/#steps","text":"In Steps mode, a pip is generated for every step of the slider defined with the bc-step attribute. In addition, each pip of a step still gets a label with the respective value. <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Steps\" bc-step=\"5\" /> <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Steps\" bc-step=\"10\" />","title":"Steps"},{"location":"forms/nouislider/#positions","text":"In Positions mode, pips are generated at percentage-based positions on the slider. <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Positions\" bc-pips-values=\"0, 25, 50, 75, 100\" /> <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Positions\" bc-pips-values=\"0, 10, 20, 30, 40, 50, 100\" />","title":"Positions"},{"location":"forms/nouislider/#count","text":"The Count mode can be used to generate a fixed number of pips. <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Count\" bc-pips-values=\"5\" /> <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Count\" bc-pips-values=\"11\" />","title":"Count"},{"location":"forms/nouislider/#values","text":"The Values mode is similar to Positions , but it accepts values instead of percentages. <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Values\" bc-pips-values=\"0, 10, 20, 50, 100\" /> <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Values\" bc-pips-values=\"0, 15, 30, 45, 100\" />","title":"Values"},{"location":"forms/nouislider/#density","text":"The density value controls how many pips are placed on one percent of the slider range. With the default value of 1 , there is one pip per percent. For a value of 2 , a pip is placed for every 2 percent. A value below one will place more than one pip per percentage. <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Range\" /> <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Range\" bc-pips-density=\"2\" /> <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Range\" bc-pips-density=\"4\" />","title":"Density"},{"location":"forms/nouislider/#stepped","text":"By setting the bc-pips-stepped attribute to true , the pip values will be round to the slider stepping. <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Positions\" bc-step=\"2\" bc-pips-values=\"0, 25, 50, 75, 100\" /> <nouislider bc-slider-1=\"0\" bc-pips-mode=\"Positions\" bc-step=\"2\" bc-pips-values=\"0, 25, 50, 75, 100\" bc-pips-stepped=\"true\" />","title":"Stepped"},{"location":"forms/nouislider/#data-binding","text":"","title":"Data Binding"},{"location":"forms/nouislider/#view","text":"The noUiSlider Tag Helper provides the dictionary attribute asp-for-* to bind a view model property to a slider. The attribute can be assigned multiple times within one Tag Helper. For this, only the * is to be replaced by the name of the slider: <form asp-controller= \"Slider\" asp-action= \"NoUiSlider\" method= \"post\" > <form-group> <nouislider asp-for-1= \"Slider1\" asp-for-2= \"Slider2\" /> </form-group> <button type= \"submit\" > Post Data </button> </form>","title":"View"},{"location":"forms/nouislider/#view-model","text":"public class NoUiSliderViewModel { public double Slider1 { get ; set ; } public double Slider2 { get ; set ; } }","title":"View Model"},{"location":"forms/nouislider/#controller","text":"public class SliderController : Controller { public IActionResult NoUiSlider () { // Instance a view model with default slider values NoUiSliderViewModel model = new NoUiSliderViewModel { Slider1 = 33.3 , Slider2 = 66.6 }; return View ( model ); } [HttpPost] public IActionResult NoUiSlider ( NoUiSliderViewModel model ) { // Read value of first Slider var sliderValue1 = model . Slider1 ; // Read value of second Slider var sliderValue2 = model . Slider2 ; return View ( model ); } }","title":"Controller"},{"location":"forms/radio-list/","text":"Radio List The <radio-list> tag helper is a wrapper for radio input elements. For a correct rendering it is necessary to embedding all radios into a radio list. <radio-list bc-label= \"Default Radiobuttons\" > <input type= \"radio\" name= \"radio1\" bc-label= \"Default\" /> <input type= \"radio\" name= \"radio1\" bc-label= \"Disabled\" disabled /> <input type= \"radio\" name= \"radio1\" bc-label= \"Checked\" checked /> </radio-list> Configuration Inline Radios can rendered on the same horizontal row by adding the bc-inline attribute to the list wrapper. <radio-list bc-inline= \"true\" > ... </radio-list> Label To set a label for a list of radios use the bc-label attribute. <radio-list bc-label= \"Default Radios\" > ... </radio-list> Help To set a help text for a list of radios use the bc-help attribute. <radio-list bc-label= \"Inline Radios\" bc-help= \"Some help text goes here\" bc-inline= \"true\" > ... </radio-list> Items To bind a list of items to a Radio List use the bc-items attribute. This attribute accepts an object of List<SelectListItem> . <!-- VIEW --> @model BSolutions.Mecons.Test.Models.DataBindingViewModel <radio-list bc-label= \"Character\" bc-items= \"Model.Characters\" bc-inline= \"true\" ></radio-list> // VIEW MODEL public class DataBindingViewModel { public List < SelectListItem > Characters { get ; set ; } = new List < SelectListItem >(); public DataBindingViewModel () { this . Characters . Add ( new SelectListItem { Value = \"0\" , Text = \"Calm\" }); this . Characters . Add ( new SelectListItem { Value = \"1\" , Text = \"Bright\" }); this . Characters . Add ( new SelectListItem { Value = \"2\" , Text = \"Lively\" }); this . Characters . Add ( new SelectListItem { Value = \"3\" , Text = \"Crazy\" }); } } It is also possible to bind the values of an enumeration to a Radio List. Use the Html.GetEnumSelectList<TEnum>() method of the HtmlHelper class to return a select list for the given enum type. <!-- VIEW --> @model BSolutions.Mecons.Test.Models.DataBindingViewModel <radio-list bc-label= \"Gender\" bc-inline= \"true\" bc-items= \"Html.GetEnumSelectList<Gender>()\" ></radio-list> // ENUMERATION public enum Gender { [Display(Name = \"Male\")] Male , [Display(Name = \"Female\")] Female } Data Binding Model binding in ASP.NET Core MVC maps data from HTTP requests to action method parameters. With asp-for attribute of the Radio List it is possible to bind selected option to a model parameter. <!-- VIEW --> @model BSolutions.Mecons.Test.Models.DataBindingViewModel <form-group> <radio-list asp-for= \"Gender\" bc-items= \"Html.GetEnumSelectList<Gender>()\" ></radio-list> </form-group> <form-group> <radio-list asp-for= \"Character\" bc-items= \"Model.Characters\" ></radio-list> </form-group> // VIEW MODEL public class DataBindingViewModel { [Display(Name = \"Gender\")] public Gender Gender { get ; set ; } [Display(Name = \"Character\")] public string Character { get ; set ; } public List < SelectListItem > Characters { get ; set ; } = new List < SelectListItem >(); } public enum Gender { Male , Female } // CONTROLLER public IActionResult DataBinding () { var model = new DataBindingViewModel (); model . Characters . Add ( new SelectListItem { Value = \"0\" , Text = \"Calm\" }); model . Characters . Add ( new SelectListItem { Value = \"1\" , Text = \"Bright\" }); model . Characters . Add ( new SelectListItem { Value = \"2\" , Text = \"Lively\" }); model . Characters . Add ( new SelectListItem { Value = \"3\" , Text = \"Crazy\" }); return View ( model ); } [HttpPost] public IActionResult DataBinding ( DataBindingViewModel model ) { // Get selected Gender with model.Gender // Get selected Character with model.Character }","title":"Radio List"},{"location":"forms/radio-list/#radio-list","text":"The <radio-list> tag helper is a wrapper for radio input elements. For a correct rendering it is necessary to embedding all radios into a radio list. <radio-list bc-label= \"Default Radiobuttons\" > <input type= \"radio\" name= \"radio1\" bc-label= \"Default\" /> <input type= \"radio\" name= \"radio1\" bc-label= \"Disabled\" disabled /> <input type= \"radio\" name= \"radio1\" bc-label= \"Checked\" checked /> </radio-list>","title":"Radio List"},{"location":"forms/radio-list/#configuration","text":"","title":"Configuration"},{"location":"forms/radio-list/#inline","text":"Radios can rendered on the same horizontal row by adding the bc-inline attribute to the list wrapper. <radio-list bc-inline= \"true\" > ... </radio-list>","title":"Inline"},{"location":"forms/radio-list/#label","text":"To set a label for a list of radios use the bc-label attribute. <radio-list bc-label= \"Default Radios\" > ... </radio-list>","title":"Label"},{"location":"forms/radio-list/#help","text":"To set a help text for a list of radios use the bc-help attribute. <radio-list bc-label= \"Inline Radios\" bc-help= \"Some help text goes here\" bc-inline= \"true\" > ... </radio-list>","title":"Help"},{"location":"forms/radio-list/#items","text":"To bind a list of items to a Radio List use the bc-items attribute. This attribute accepts an object of List<SelectListItem> . <!-- VIEW --> @model BSolutions.Mecons.Test.Models.DataBindingViewModel <radio-list bc-label= \"Character\" bc-items= \"Model.Characters\" bc-inline= \"true\" ></radio-list> // VIEW MODEL public class DataBindingViewModel { public List < SelectListItem > Characters { get ; set ; } = new List < SelectListItem >(); public DataBindingViewModel () { this . Characters . Add ( new SelectListItem { Value = \"0\" , Text = \"Calm\" }); this . Characters . Add ( new SelectListItem { Value = \"1\" , Text = \"Bright\" }); this . Characters . Add ( new SelectListItem { Value = \"2\" , Text = \"Lively\" }); this . Characters . Add ( new SelectListItem { Value = \"3\" , Text = \"Crazy\" }); } } It is also possible to bind the values of an enumeration to a Radio List. Use the Html.GetEnumSelectList<TEnum>() method of the HtmlHelper class to return a select list for the given enum type. <!-- VIEW --> @model BSolutions.Mecons.Test.Models.DataBindingViewModel <radio-list bc-label= \"Gender\" bc-inline= \"true\" bc-items= \"Html.GetEnumSelectList<Gender>()\" ></radio-list> // ENUMERATION public enum Gender { [Display(Name = \"Male\")] Male , [Display(Name = \"Female\")] Female }","title":"Items"},{"location":"forms/radio-list/#data-binding","text":"Model binding in ASP.NET Core MVC maps data from HTTP requests to action method parameters. With asp-for attribute of the Radio List it is possible to bind selected option to a model parameter. <!-- VIEW --> @model BSolutions.Mecons.Test.Models.DataBindingViewModel <form-group> <radio-list asp-for= \"Gender\" bc-items= \"Html.GetEnumSelectList<Gender>()\" ></radio-list> </form-group> <form-group> <radio-list asp-for= \"Character\" bc-items= \"Model.Characters\" ></radio-list> </form-group> // VIEW MODEL public class DataBindingViewModel { [Display(Name = \"Gender\")] public Gender Gender { get ; set ; } [Display(Name = \"Character\")] public string Character { get ; set ; } public List < SelectListItem > Characters { get ; set ; } = new List < SelectListItem >(); } public enum Gender { Male , Female } // CONTROLLER public IActionResult DataBinding () { var model = new DataBindingViewModel (); model . Characters . Add ( new SelectListItem { Value = \"0\" , Text = \"Calm\" }); model . Characters . Add ( new SelectListItem { Value = \"1\" , Text = \"Bright\" }); model . Characters . Add ( new SelectListItem { Value = \"2\" , Text = \"Lively\" }); model . Characters . Add ( new SelectListItem { Value = \"3\" , Text = \"Crazy\" }); return View ( model ); } [HttpPost] public IActionResult DataBinding ( DataBindingViewModel model ) { // Get selected Gender with model.Gender // Get selected Character with model.Character }","title":"Data Binding"},{"location":"forms/select/","text":"Dropdown (Select) A dropdown will be specified with a <select> tag and provides a dropdown to select a single or multiple values. <select bc-label= \"Select Control\" > <option> 1 </option> <option> 2 </option> <option> 3 </option> </select>","title":"Dropdown"},{"location":"forms/select/#dropdown-select","text":"A dropdown will be specified with a <select> tag and provides a dropdown to select a single or multiple values. <select bc-label= \"Select Control\" > <option> 1 </option> <option> 2 </option> <option> 3 </option> </select>","title":"Dropdown (Select)"},{"location":"forms/static/","text":"Static A static control is a read-only output of an information and will be specified with a <static> tag. <static bc-label= \"Static Control\" > email@example.com </static>","title":"Static"},{"location":"forms/static/#static","text":"A static control is a read-only output of an information and will be specified with a <static> tag. <static bc-label= \"Static Control\" > email@example.com </static>","title":"Static"},{"location":"forms/summernote/","text":"Summernote Summernote is a super simple WYSIWYG editor on Bootstrap. You design your content as it should look like later, Summernote translate this to valid HTML markup. <summernote bc-height=\"200\" /> Configuration Height Set the editor height with the bc-height attribute. Allowed values for this attribute are integers. The unit for this value are pixels (px).","title":"Summernote"},{"location":"forms/summernote/#summernote","text":"Summernote is a super simple WYSIWYG editor on Bootstrap. You design your content as it should look like later, Summernote translate this to valid HTML markup. <summernote bc-height=\"200\" />","title":"Summernote"},{"location":"forms/summernote/#configuration","text":"","title":"Configuration"},{"location":"forms/summernote/#height","text":"Set the editor height with the bc-height attribute. Allowed values for this attribute are integers. The unit for this value are pixels (px).","title":"Height"},{"location":"forms/switch/","text":"Switch A Switch is a simple component used for activating one of two predefined options. Commonly used as an on/off button. <switch bc-label=\"Default Switch\" /> Configuration Icon Set the bc-icon attribute to true to add an icon to the Switch. <switch bc-label=\"Icon\" bc-icon=\"true\" /> Color For proper styling of an Switch use the bc-color attribute. <switch bc-label=\"Success\" bc-icon=\"true\" bc-color=\"Success\" checked /> <switch bc-label=\"Warning\" bc-icon=\"true\" bc-color=\"Warning\" checked /> <switch bc-label=\"Info\" bc-icon=\"true\" bc-color=\"Info\" checked /> <switch bc-label=\"Danger\" bc-icon=\"true\" bc-color=\"Danger\" checked /> Outline To render the Switch outline and inverse colors, set the bc-outline attribute to true . <switch bc-label=\"Success\" bc-icon=\"true\" bc-color=\"Success\" bc-outline=\"true\" checked /> <switch bc-label=\"Warning\" bc-icon=\"true\" bc-color=\"Warning\" bc-outline=\"true\" checked /> <switch bc-label=\"Info\" bc-icon=\"true\" bc-color=\"Info\" bc-outline=\"true\" checked /> <switch bc-label=\"Danger\" bc-icon=\"true\" bc-color=\"Danger\" bc-outline=\"true\" checked />","title":"Switch"},{"location":"forms/switch/#switch","text":"A Switch is a simple component used for activating one of two predefined options. Commonly used as an on/off button. <switch bc-label=\"Default Switch\" />","title":"Switch"},{"location":"forms/switch/#configuration","text":"","title":"Configuration"},{"location":"forms/switch/#icon","text":"Set the bc-icon attribute to true to add an icon to the Switch. <switch bc-label=\"Icon\" bc-icon=\"true\" />","title":"Icon"},{"location":"forms/switch/#color","text":"For proper styling of an Switch use the bc-color attribute. <switch bc-label=\"Success\" bc-icon=\"true\" bc-color=\"Success\" checked /> <switch bc-label=\"Warning\" bc-icon=\"true\" bc-color=\"Warning\" checked /> <switch bc-label=\"Info\" bc-icon=\"true\" bc-color=\"Info\" checked /> <switch bc-label=\"Danger\" bc-icon=\"true\" bc-color=\"Danger\" checked />","title":"Color"},{"location":"forms/switch/#outline","text":"To render the Switch outline and inverse colors, set the bc-outline attribute to true . <switch bc-label=\"Success\" bc-icon=\"true\" bc-color=\"Success\" bc-outline=\"true\" checked /> <switch bc-label=\"Warning\" bc-icon=\"true\" bc-color=\"Warning\" bc-outline=\"true\" checked /> <switch bc-label=\"Info\" bc-icon=\"true\" bc-color=\"Info\" bc-outline=\"true\" checked /> <switch bc-label=\"Danger\" bc-icon=\"true\" bc-color=\"Danger\" bc-outline=\"true\" checked />","title":"Outline"},{"location":"forms/textarea/","text":"Textarea (Multi-line Input) The textarea will be specified with a <textarea> tag and provides a multi-line text input field. <textarea bc-label= \"Textarea Control\" ></textarea>","title":"Textarea"},{"location":"forms/textarea/#textarea-multi-line-input","text":"The textarea will be specified with a <textarea> tag and provides a multi-line text input field. <textarea bc-label= \"Textarea Control\" ></textarea>","title":"Textarea (Multi-line Input)"},{"location":"forms/timepicker/","text":"Timepicker With the Timepicker you can easily select a time for a text input using your mouse or keyboards arrow keys. <timepicker bc-label=\"Start Time\" /> Configuration Steps Specify a gradual increase for the minutes or seconds field. To set a step for the minutes field use the bc-minute-step attribute and set it to an integer between 1 and 60 . The same is possible for the seconds field. Therefore use the bc-second-step attribute. Seconds To show a field for seconds set the bc-seconds attribute to true . <timepicker bc-label=\"Start Time\" bc-seconds=\"true\" /> Meridian To show a field for meridian selection set the bc-meridian attribute to true . By default, the meridian field is enabled. Input Fields To disable the input fields for hours, minutes, seconds and meridian set the bc-inputs attribute to false . <timepicker bc-label=\"Start Time\" bc-inputs=\"false\" /> Icon Set an icon addon for the timepicker with the bc-icon attribute. <timepicker bc-label=\"Start Time\" bc-icon=\"FA_Clock\" /> Disable Focus Setting the bc-disable-focus attribute to true disables the input from focusing. This is useful for touch screen devices that display a keyboard on input focus.","title":"Timepicker"},{"location":"forms/timepicker/#timepicker","text":"With the Timepicker you can easily select a time for a text input using your mouse or keyboards arrow keys. <timepicker bc-label=\"Start Time\" />","title":"Timepicker"},{"location":"forms/timepicker/#configuration","text":"","title":"Configuration"},{"location":"forms/timepicker/#steps","text":"Specify a gradual increase for the minutes or seconds field. To set a step for the minutes field use the bc-minute-step attribute and set it to an integer between 1 and 60 . The same is possible for the seconds field. Therefore use the bc-second-step attribute.","title":"Steps"},{"location":"forms/timepicker/#seconds","text":"To show a field for seconds set the bc-seconds attribute to true . <timepicker bc-label=\"Start Time\" bc-seconds=\"true\" />","title":"Seconds"},{"location":"forms/timepicker/#meridian","text":"To show a field for meridian selection set the bc-meridian attribute to true . By default, the meridian field is enabled.","title":"Meridian"},{"location":"forms/timepicker/#input-fields","text":"To disable the input fields for hours, minutes, seconds and meridian set the bc-inputs attribute to false . <timepicker bc-label=\"Start Time\" bc-inputs=\"false\" />","title":"Input Fields"},{"location":"forms/timepicker/#icon","text":"Set an icon addon for the timepicker with the bc-icon attribute. <timepicker bc-label=\"Start Time\" bc-icon=\"FA_Clock\" />","title":"Icon"},{"location":"forms/timepicker/#disable-focus","text":"Setting the bc-disable-focus attribute to true disables the input from focusing. This is useful for touch screen devices that display a keyboard on input focus.","title":"Disable Focus"},{"location":"forms/touchspin/","text":"Touchspin A Touchspin is a mobile and touch friendly spinner component for numeric inputs. It supports the mousewheel and the up/down keys. <touchspin bc-label=\"Minimum Setup\" /> Configuration Minimum Define the minimum value of the touchspin with the bc-min attribute. By default the minimum value is 0 . Maximum Define the maximum value of the touchspin with the bc-max attribute. By default the maximum value is 100 . Step Set the incremental/decremental step on up/down change with the bc-step attribute. By default the step is 1 . Decimals Set the number of decimal points with the bc-decimals attribute. By default the number of decimals are 0 . <touchspin bc-label=\"Decimals\" bc-decimals=\"2\" /> Prefix Define a text or character before the input of the touchspin by using the bc-prefix attribute. <touchspin bc-label=\"Prefix\" bc-postfix=\"$\" /> Postfix Define a text or character after the input of the touchspin by using the bc-postfix attribute. <touchspin bc-label=\"Postfix\" bc-max=\"10000\" bc-decimals=\"2\" bc-step=\"0.5\" bc-postfix=\"EUR\" /> Colored Buttons Define the color of the down button with the bc-color-down attribute. Use the bc-color-up attribute to define a color for up button. By default, the color for both buttons are Secondary . <touchspin bc-label=\"Colored Touchspin\" bc-color-down=\"Danger\" bc-color-up=\"Success\" /> Up Button Color Define the color of the up button with the up-color attribute. Orientation The bc-orientation attribute can affect the orientation of the touchpin buttons. Possible values are a Horizontal (default) or a Vertical orientation. <!-- Vertical Layout --> <touchspin bc-label=\"Vertical\" bc-orientation=\"Vertical\" /> <!-- Horizontal Layout --> <touchspin bc-label=\"Horizontal\" bc-orientation=\"Horizontal\" />","title":"Touchspin"},{"location":"forms/touchspin/#touchspin","text":"A Touchspin is a mobile and touch friendly spinner component for numeric inputs. It supports the mousewheel and the up/down keys. <touchspin bc-label=\"Minimum Setup\" />","title":"Touchspin"},{"location":"forms/touchspin/#configuration","text":"","title":"Configuration"},{"location":"forms/touchspin/#minimum","text":"Define the minimum value of the touchspin with the bc-min attribute. By default the minimum value is 0 .","title":"Minimum"},{"location":"forms/touchspin/#maximum","text":"Define the maximum value of the touchspin with the bc-max attribute. By default the maximum value is 100 .","title":"Maximum"},{"location":"forms/touchspin/#step","text":"Set the incremental/decremental step on up/down change with the bc-step attribute. By default the step is 1 .","title":"Step"},{"location":"forms/touchspin/#decimals","text":"Set the number of decimal points with the bc-decimals attribute. By default the number of decimals are 0 . <touchspin bc-label=\"Decimals\" bc-decimals=\"2\" />","title":"Decimals"},{"location":"forms/touchspin/#prefix","text":"Define a text or character before the input of the touchspin by using the bc-prefix attribute. <touchspin bc-label=\"Prefix\" bc-postfix=\"$\" />","title":"Prefix"},{"location":"forms/touchspin/#postfix","text":"Define a text or character after the input of the touchspin by using the bc-postfix attribute. <touchspin bc-label=\"Postfix\" bc-max=\"10000\" bc-decimals=\"2\" bc-step=\"0.5\" bc-postfix=\"EUR\" />","title":"Postfix"},{"location":"forms/touchspin/#colored-buttons","text":"Define the color of the down button with the bc-color-down attribute. Use the bc-color-up attribute to define a color for up button. By default, the color for both buttons are Secondary . <touchspin bc-label=\"Colored Touchspin\" bc-color-down=\"Danger\" bc-color-up=\"Success\" />","title":"Colored Buttons"},{"location":"forms/touchspin/#up-button-color","text":"Define the color of the up button with the up-color attribute.","title":"Up Button Color"},{"location":"forms/touchspin/#orientation","text":"The bc-orientation attribute can affect the orientation of the touchpin buttons. Possible values are a Horizontal (default) or a Vertical orientation. <!-- Vertical Layout --> <touchspin bc-label=\"Vertical\" bc-orientation=\"Vertical\" /> <!-- Horizontal Layout --> <touchspin bc-label=\"Horizontal\" bc-orientation=\"Horizontal\" />","title":"Orientation"},{"location":"forms/validation/","text":"Validation Provide valuable, actionable feedback with Mecons Validation to your users with HTML5 form validation. Use the Mecons Tag Helpers in combination with the default ASP.NET Core Validation mechanism to validate your forms easy and simple. Requirements To enable the client-side validation in ASP.NET MVC Core in combination with Mecons, you have to load the jquery-validation-unobtrusive package from Yarn . Yarn is a package manager and allows to use code from other developers. If you want to use Yarn, you need to install it first: https://yarnpkg.com/en/docs/install. The easiest way to load the jquery-validation-unobtrusive package is to open a command prompt, switch to the wwwroot folder of your project and execute the following command: $ yarn add jquery-validation-unobtrusive After embedding the jquery-validation-unobtrusive package into your solution, add a reference within the /Shared/_Layout.cshtml page after the Metronic scripts: <script src= \"~/node_modules/jquery-validation-unobtrusive/dist/jquery.validate.unobtrusive.js\" ></script> Data Binding Validation All Mecons form controls supports the default ASP.NET Core Validation . It's possible to validate the form on client-side with jQuery Validation or after a postback on server-side. For a client-side validation use data annotations in your view model and bind the properties to the form controls within your view. Mecons now renders the validation errors automatically in Metronic compatible styles. A server-side validation will execute in the controller logic after a postback. Use the ModelState to check if the form data is valid or to add further validation errors. Note It is indispensable to check the Form Configuration attributes before using Mecons Validation. <!-- VIEW --> <form asp-action= \"Register\" method= \"post\" bc-validation= \"true\" > <form-group> <input type= \"text\" asp-for= \"Name\" /> </form-group> <form-group> <input type= \"password\" asp-for= \"Password\" /> </form-group> <form-group> <input type= \"password\" asp-for= \"PasswordConfirmation\" /> </form-group> <form-group> <select asp-for= \"Country\" asp-items= \"Model.Countries\" ></select> </form-group> <button type= \"submit\" > Submit </button> </form> // VIEW MODEL public class RegisterViewModel { [Display(Name = \"User Name\")] [Required] public string Name { get ; set ; } [Display(Name = \"Password\")] [Required] public string Password { get ; set ; } [Display(Name = \"Confirm Password\")] [Compare(\"Password\")] public string PasswordConfirmation { get ; set ; } [Display(Name = \"Country\")] public int Country { get ; set ; } public List < SelectListItem > Countries { get ; set ; } = new List < SelectListItem >(); public RegisterViewModel () { this . Countries . Add ( new SelectListItem { Value = \"0\" , Text = \"Choose a country ...\" }); this . Countries . Add ( new SelectListItem { Value = \"1\" , Text = \"Germany\" }); // Further countries ... } } // CONTROLLER public IActionResult Register () { return View ( new RegisterViewModel ()); } [HttpPost] public IActionResult Register ( RegisterViewModel model ) { // Server-side validation if ( model . Country <= 0 ) ModelState . AddModelError ( \"Country\" , \"No country was selected.\" ); // On validation errors go back to view if (! ModelState . IsValid ) return View ( model ); return RedirectToAction ( \"Success\" ); } Form Configuration Validation By default, the ASP.NET Core Validation is enabled for all Mecons forms. That means that each control within the form renders a validation message on model error. To disable the validation for all controls within the form set the bc-validation attribute to false . Furthermore it is possible to disable the validation on control level by setting the bc-validation to false for a specific control. <form asp-action= \"Register\" bc-validation= \"true\" > ... </form>","title":"Validation"},{"location":"forms/validation/#validation","text":"Provide valuable, actionable feedback with Mecons Validation to your users with HTML5 form validation. Use the Mecons Tag Helpers in combination with the default ASP.NET Core Validation mechanism to validate your forms easy and simple.","title":"Validation"},{"location":"forms/validation/#requirements","text":"To enable the client-side validation in ASP.NET MVC Core in combination with Mecons, you have to load the jquery-validation-unobtrusive package from Yarn . Yarn is a package manager and allows to use code from other developers. If you want to use Yarn, you need to install it first: https://yarnpkg.com/en/docs/install. The easiest way to load the jquery-validation-unobtrusive package is to open a command prompt, switch to the wwwroot folder of your project and execute the following command: $ yarn add jquery-validation-unobtrusive After embedding the jquery-validation-unobtrusive package into your solution, add a reference within the /Shared/_Layout.cshtml page after the Metronic scripts: <script src= \"~/node_modules/jquery-validation-unobtrusive/dist/jquery.validate.unobtrusive.js\" ></script>","title":"Requirements"},{"location":"forms/validation/#data-binding-validation","text":"All Mecons form controls supports the default ASP.NET Core Validation . It's possible to validate the form on client-side with jQuery Validation or after a postback on server-side. For a client-side validation use data annotations in your view model and bind the properties to the form controls within your view. Mecons now renders the validation errors automatically in Metronic compatible styles. A server-side validation will execute in the controller logic after a postback. Use the ModelState to check if the form data is valid or to add further validation errors. Note It is indispensable to check the Form Configuration attributes before using Mecons Validation. <!-- VIEW --> <form asp-action= \"Register\" method= \"post\" bc-validation= \"true\" > <form-group> <input type= \"text\" asp-for= \"Name\" /> </form-group> <form-group> <input type= \"password\" asp-for= \"Password\" /> </form-group> <form-group> <input type= \"password\" asp-for= \"PasswordConfirmation\" /> </form-group> <form-group> <select asp-for= \"Country\" asp-items= \"Model.Countries\" ></select> </form-group> <button type= \"submit\" > Submit </button> </form> // VIEW MODEL public class RegisterViewModel { [Display(Name = \"User Name\")] [Required] public string Name { get ; set ; } [Display(Name = \"Password\")] [Required] public string Password { get ; set ; } [Display(Name = \"Confirm Password\")] [Compare(\"Password\")] public string PasswordConfirmation { get ; set ; } [Display(Name = \"Country\")] public int Country { get ; set ; } public List < SelectListItem > Countries { get ; set ; } = new List < SelectListItem >(); public RegisterViewModel () { this . Countries . Add ( new SelectListItem { Value = \"0\" , Text = \"Choose a country ...\" }); this . Countries . Add ( new SelectListItem { Value = \"1\" , Text = \"Germany\" }); // Further countries ... } } // CONTROLLER public IActionResult Register () { return View ( new RegisterViewModel ()); } [HttpPost] public IActionResult Register ( RegisterViewModel model ) { // Server-side validation if ( model . Country <= 0 ) ModelState . AddModelError ( \"Country\" , \"No country was selected.\" ); // On validation errors go back to view if (! ModelState . IsValid ) return View ( model ); return RedirectToAction ( \"Success\" ); }","title":"Data Binding Validation"},{"location":"forms/validation/#form-configuration","text":"","title":"Form Configuration"},{"location":"forms/validation/#validation_1","text":"By default, the ASP.NET Core Validation is enabled for all Mecons forms. That means that each control within the form renders a validation message on model error. To disable the validation for all controls within the form set the bc-validation attribute to false . Furthermore it is possible to disable the validation on control level by setting the bc-validation to false for a specific control. <form asp-action= \"Register\" bc-validation= \"true\" > ... </form>","title":"Validation"},{"location":"layout/grid-system/","text":"Grid System Use the powerful mobile-first flexbox Bootstrap Grid System to build layouts of all shapes and sizes thanks to a twelve column system, five default responsive tiers, Sass variables and mixins, and dozens of predefined classes. Bootstrap\u2019s grid system uses a series of containers, rows, and columns to layout and align content. It\u2019s built with flexbox and is fully responsive. All Bootstrap Grid System features are covered from the Mecons Tag Helper! <row> <column> 1 of 2 </column> <column> 2 of 2 </column> </row> <row> <column> 1 of 3 </column> <column> 2 of 3 </column> <column> 3 of 3 </column> </row> Row Configuration Vertical Alignment To align all columns in a vertical direction set the vertical-alignment attribute. Possible values for the alignment are Top , Middle and Bottom . <row vertical-alignment= \"Top\" style= \"height: 10rem;\" > <column> One of three columns </column> <column> One of three columns </column> <column> One of three columns </column> </row> <row vertical-alignment= \"Middle\" style= \"height: 10rem;\" > <column> One of three columns </column> <column> One of three columns </column> <column> One of three columns </column> </row> <row vertical-alignment= \"Bottom\" style= \"height: 10rem;\" > <column> One of three columns </column> <column> One of three columns </column> <column> One of three columns </column> </row> Horizontal Alignment To align all columns in the horizontal direction set the alignment attribute. Possible values for the classic horizontal alignment are Left , Center and Right . Choose the value Around for the same width whitespace before, between and after the aligned columns. The value Between renders a full width whitespace between the columns. <row alignment= \"Left\" > <column xs-size= \"4\" > One of two columns </column> <column xs-size= \"4\" > One of two columns </column> </row> <row alignment= \"Center\" style= \"margin-top: 1rem;\" > <column xs-size= \"4\" > One of two columns </column> <column xs-size= \"4\" > One of two columns </column> </row> <row alignment= \"Right\" style= \"margin-top: 1rem;\" > <column xs-size= \"4\" > One of two columns </column> <column xs-size= \"4\" > One of two columns </column> </row> <row alignment= \"Around\" style= \"margin-top: 1rem;\" > <column xs-size= \"4\" > One of two columns </column> <column xs-size= \"4\" > One of two columns </column> </row> <row alignment= \"Between\" style= \"margin-top: 1rem;\" > <column xs-size= \"4\" > One of two columns </column> <column xs-size= \"4\" > One of two columns </column> </row> Column Configuration Size Set the column width for a specified resolution with the appropriate attribute (e.g. xs-size , sm-size , md-size , lg-size or xl-size ). If you don't set any size attribute each column renders with equal width and is auto-layouted. <row> <column xs-size= \"12\" md-size= \"8\" > .col-12 .col-md-8 </column> <column xs-size= \"6\" md-size= \"4\" > .col-6 .col-md-4 </column> </row> <!-- Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop --> <row> <column xs-size= \"6\" md-size= \"4\" > .col-6 .col-md-4 </column> <column xs-size= \"6\" md-size= \"4\" > .col-6 .col-md-4 </column> <column xs-size= \"6\" md-size= \"4\" > .col-6 .col-md-4 </column> </row> <!-- Columns are always 50% wide, on mobile and desktop --> <row> <column> .col-6 </column> <column> .col-6 </column> </row> Render To size columns based on the natural width of their content, use the appropriate attribute (e.g. xs-render , sm-render , md-render , lg-render or xl-render ). <row alignment= \"Center\" > <column> 1 of 3 </column> <column md-render= \"Dynamic\" > Variable width content </column> <column> 2 of 3 </column> </row> <row> <column> 1 of 3 </column> <column xl-render= \"Dynamic\" > Variable width content Variable width content Variable width content Variable width content </column> <column> 3 of 3 </column> </row> Order Use the order attribute for controlling the visual order of your content. These attributes are responsive, so you can set the order by a specific resolution (e.g. xs-order , sm-order , md-order , lg-order or xl-order ). Includes support for 1 through 12 across all five grid tiers. <row> <column> First, but unordered </column> <column xs-order= \"12\" > Second, but last </column> <column xs-order= \"1\" > Third, but first </column> </row> Offset Set the column offset for a specified resolution with the appropriate attribute (e.g. xs-offset , sm-offset , md-offset , lg-offset or xl-offset ). <row> <column md-size= \"4\" > .col-md-4 </column> <column md-size= \"4\" md-offset= \"4\" > .col-md-4 .offset-md-4 </column> </row> <row> <column md-size= \"3\" md-offset= \"3\" > .col-md-3 .offset-md-3 </column> <column md-size= \"3\" md-offset= \"3\" > .col-md-3 .offset-md-3 </column> </row> <row> <column md-size= \"6\" md-offset= \"3\" > .col-md-6 .offset-md-3 </column> </row> Vertical Alignment To align a single column in the vertical direction within a row set the vertical-alignment attribute. <row style= \"height: 10rem;\" > <column vertical-alignment= \"Top\" > One of three columns </column> <column vertical-alignment= \"Middle\" > One of three columns </column> <column vertical-alignment= \"Bottom\" > One of three columns </column> </row>","title":"Grid System"},{"location":"layout/grid-system/#grid-system","text":"Use the powerful mobile-first flexbox Bootstrap Grid System to build layouts of all shapes and sizes thanks to a twelve column system, five default responsive tiers, Sass variables and mixins, and dozens of predefined classes. Bootstrap\u2019s grid system uses a series of containers, rows, and columns to layout and align content. It\u2019s built with flexbox and is fully responsive. All Bootstrap Grid System features are covered from the Mecons Tag Helper! <row> <column> 1 of 2 </column> <column> 2 of 2 </column> </row> <row> <column> 1 of 3 </column> <column> 2 of 3 </column> <column> 3 of 3 </column> </row>","title":"Grid System"},{"location":"layout/grid-system/#row-configuration","text":"","title":"Row Configuration"},{"location":"layout/grid-system/#vertical-alignment","text":"To align all columns in a vertical direction set the vertical-alignment attribute. Possible values for the alignment are Top , Middle and Bottom . <row vertical-alignment= \"Top\" style= \"height: 10rem;\" > <column> One of three columns </column> <column> One of three columns </column> <column> One of three columns </column> </row> <row vertical-alignment= \"Middle\" style= \"height: 10rem;\" > <column> One of three columns </column> <column> One of three columns </column> <column> One of three columns </column> </row> <row vertical-alignment= \"Bottom\" style= \"height: 10rem;\" > <column> One of three columns </column> <column> One of three columns </column> <column> One of three columns </column> </row>","title":"Vertical Alignment"},{"location":"layout/grid-system/#horizontal-alignment","text":"To align all columns in the horizontal direction set the alignment attribute. Possible values for the classic horizontal alignment are Left , Center and Right . Choose the value Around for the same width whitespace before, between and after the aligned columns. The value Between renders a full width whitespace between the columns. <row alignment= \"Left\" > <column xs-size= \"4\" > One of two columns </column> <column xs-size= \"4\" > One of two columns </column> </row> <row alignment= \"Center\" style= \"margin-top: 1rem;\" > <column xs-size= \"4\" > One of two columns </column> <column xs-size= \"4\" > One of two columns </column> </row> <row alignment= \"Right\" style= \"margin-top: 1rem;\" > <column xs-size= \"4\" > One of two columns </column> <column xs-size= \"4\" > One of two columns </column> </row> <row alignment= \"Around\" style= \"margin-top: 1rem;\" > <column xs-size= \"4\" > One of two columns </column> <column xs-size= \"4\" > One of two columns </column> </row> <row alignment= \"Between\" style= \"margin-top: 1rem;\" > <column xs-size= \"4\" > One of two columns </column> <column xs-size= \"4\" > One of two columns </column> </row>","title":"Horizontal Alignment"},{"location":"layout/grid-system/#column-configuration","text":"","title":"Column Configuration"},{"location":"layout/grid-system/#size","text":"Set the column width for a specified resolution with the appropriate attribute (e.g. xs-size , sm-size , md-size , lg-size or xl-size ). If you don't set any size attribute each column renders with equal width and is auto-layouted. <row> <column xs-size= \"12\" md-size= \"8\" > .col-12 .col-md-8 </column> <column xs-size= \"6\" md-size= \"4\" > .col-6 .col-md-4 </column> </row> <!-- Columns start at 50% wide on mobile and bump up to 33.3% wide on desktop --> <row> <column xs-size= \"6\" md-size= \"4\" > .col-6 .col-md-4 </column> <column xs-size= \"6\" md-size= \"4\" > .col-6 .col-md-4 </column> <column xs-size= \"6\" md-size= \"4\" > .col-6 .col-md-4 </column> </row> <!-- Columns are always 50% wide, on mobile and desktop --> <row> <column> .col-6 </column> <column> .col-6 </column> </row>","title":"Size"},{"location":"layout/grid-system/#render","text":"To size columns based on the natural width of their content, use the appropriate attribute (e.g. xs-render , sm-render , md-render , lg-render or xl-render ). <row alignment= \"Center\" > <column> 1 of 3 </column> <column md-render= \"Dynamic\" > Variable width content </column> <column> 2 of 3 </column> </row> <row> <column> 1 of 3 </column> <column xl-render= \"Dynamic\" > Variable width content Variable width content Variable width content Variable width content </column> <column> 3 of 3 </column> </row>","title":"Render"},{"location":"layout/grid-system/#order","text":"Use the order attribute for controlling the visual order of your content. These attributes are responsive, so you can set the order by a specific resolution (e.g. xs-order , sm-order , md-order , lg-order or xl-order ). Includes support for 1 through 12 across all five grid tiers. <row> <column> First, but unordered </column> <column xs-order= \"12\" > Second, but last </column> <column xs-order= \"1\" > Third, but first </column> </row>","title":"Order"},{"location":"layout/grid-system/#offset","text":"Set the column offset for a specified resolution with the appropriate attribute (e.g. xs-offset , sm-offset , md-offset , lg-offset or xl-offset ). <row> <column md-size= \"4\" > .col-md-4 </column> <column md-size= \"4\" md-offset= \"4\" > .col-md-4 .offset-md-4 </column> </row> <row> <column md-size= \"3\" md-offset= \"3\" > .col-md-3 .offset-md-3 </column> <column md-size= \"3\" md-offset= \"3\" > .col-md-3 .offset-md-3 </column> </row> <row> <column md-size= \"6\" md-offset= \"3\" > .col-md-6 .offset-md-3 </column> </row>","title":"Offset"},{"location":"layout/grid-system/#vertical-alignment_1","text":"To align a single column in the vertical direction within a row set the vertical-alignment attribute. <row style= \"height: 10rem;\" > <column vertical-alignment= \"Top\" > One of three columns </column> <column vertical-alignment= \"Middle\" > One of three columns </column> <column vertical-alignment= \"Bottom\" > One of three columns </column> </row>","title":"Vertical Alignment"},{"location":"layout/stack/","text":"Stack A Stack allows to build equal height and flexible blocks. <stack> <stack-item> Item 1 </stack-item> <stack-item> Item 2 </stack-item> <stack-item> Item 3 </stack-item> <stack-item> Item 4 </stack-item> </stack> Configuration Auto Width If the bc-auto-width attribute is set to true , each stack item gets the width of whose content. <stack bc-auto-width= \"true\" > <stack-item> Free content </stack-item> <stack-item> Free content </stack-item> <stack-item> Longer free content </stack-item> </stack> Orientation With the bc-orientation attribute the orientation of the stack can be set. Possible orientations are Horizontal (default) or Vertical . <stack bc-orientation= \"Vertical\" > ... </stack> Stack Item Configuration Alignment Set an item content alignment with bc-alignment attribute. Possible alignments are Left (default), Center or Right . <stack> <stack-item bc-alignment= \"Left\" > Left alignment </stack-item> <stack-item bc-alignment= \"Center\" > Center alignment </stack-item> <stack-item bc-alignment= \"Right\" > Right alignment </stack-item> </stack> Vertical Alignment Align the content vertically with the bc-vertical-alignment attribute. It is possible to align the content Top , Middle or Bottom . <stack> <stack-item bc-vertical-alignment= \"Top\" > Top alignment </stack-item> <stack-item bc-vertical-alignment= \"Middle\" > Middle alignment </stack-item> <stack-item bc-vertical-alignment= \"Bottom\" > Bottom alignment </stack-item> </stack>","title":"Stack"},{"location":"layout/stack/#stack","text":"A Stack allows to build equal height and flexible blocks. <stack> <stack-item> Item 1 </stack-item> <stack-item> Item 2 </stack-item> <stack-item> Item 3 </stack-item> <stack-item> Item 4 </stack-item> </stack>","title":"Stack"},{"location":"layout/stack/#configuration","text":"","title":"Configuration"},{"location":"layout/stack/#auto-width","text":"If the bc-auto-width attribute is set to true , each stack item gets the width of whose content. <stack bc-auto-width= \"true\" > <stack-item> Free content </stack-item> <stack-item> Free content </stack-item> <stack-item> Longer free content </stack-item> </stack>","title":"Auto Width"},{"location":"layout/stack/#orientation","text":"With the bc-orientation attribute the orientation of the stack can be set. Possible orientations are Horizontal (default) or Vertical . <stack bc-orientation= \"Vertical\" > ... </stack>","title":"Orientation"},{"location":"layout/stack/#stack-item-configuration","text":"","title":"Stack Item Configuration"},{"location":"layout/stack/#alignment","text":"Set an item content alignment with bc-alignment attribute. Possible alignments are Left (default), Center or Right . <stack> <stack-item bc-alignment= \"Left\" > Left alignment </stack-item> <stack-item bc-alignment= \"Center\" > Center alignment </stack-item> <stack-item bc-alignment= \"Right\" > Right alignment </stack-item> </stack>","title":"Alignment"},{"location":"layout/stack/#vertical-alignment","text":"Align the content vertically with the bc-vertical-alignment attribute. It is possible to align the content Top , Middle or Bottom . <stack> <stack-item bc-vertical-alignment= \"Top\" > Top alignment </stack-item> <stack-item bc-vertical-alignment= \"Middle\" > Middle alignment </stack-item> <stack-item bc-vertical-alignment= \"Bottom\" > Bottom alignment </stack-item> </stack>","title":"Vertical Alignment"}]}